/*
  HTML.h
  Main interface file for HTML parser
  (c) Copyright 1994 STNC Enterprises
 */

#include "sprite.h"

/***************************************************
                 Structures and Data types
****************************************************/

typedef struct htmltok
{
 int  type;        /* Token type */
 void *handle;     /* Internal handle */
 int  flags;       /* Token flags */
 int  length;      /* Length of data or input field */
 union
 {
  char       *text;
  sprite_area *image;
 } value;
} HTMLToken;

/* Type field values */
#define HTML_Title   1     /* Title of document */
#define HTML_Text    2     /* Text              */
#define HTML_Image   3     /* An image          */
#define HTML_HR      4     /* A horizontal rule */
#define HTML_INDEX   5     /* Current document can be searched */
#define HTML_EOF     6     /* last token in file */

/* Defined flags */
#define TOK_ADDRESS     (1<<0)  /* Token is part of an address */
#define TOK_ANCHOR      (1<<1)  /* Token is part of an anchor  */
#define TOK_BLOCKQUOTE  (1<<2)  /* The text is part of a block quote */
#define TOK_HEADING     (7<<3)  /* Heading level */
#define TOK_EMPHASIZED  (1<<6)  /* Text is emphasized */
#define TOK_BOLD        (1<<7)  /* Text is bold */
#define TOK_ITALIC      (1<<8)  /* Text is italics */
#define TOK_TT          (1<<9)  /* Use fixed width font */
#define TOK_UNDERLINE   (1<<10) /* Text is underlined */
#define TOK_ALIGN       (7<<11) /* Image alignment with text */
#define TOK_TERM        (1<<14) /* Token is a term to be defined */
#define TOK_DEF         (1<<15) /* Token is a definition for a term */
#define TOK_DIRECTORY   (1<<16) /* Token is part of a directory list */
#define TOK_MENU        (1<<17) /* Token is part of a menu list*/
#define TOK_ORDERED     (1<<18) /* Token is part of an ordered list */
#define TOK_UNORDERED   (1<<19) /* Token is part of an unordered list */
#define TOK_PARAGRAPH   (1<<20) /* Token is start of a new paragraph */
#define TOK_PREFORMAT   (1<<21) /* Token is preformatted text */
#define TOK_INPUT      (15<<22) /* Token is an input field */
#define TOK_SELECTED    (1<<26) /* Item is currently selected */


#define TOK_ALIGN_NONE    (0<<11)
#define TOK_ALIGN_TOP     (1<<11)
#define TOK_ALIGN_MIDDILE (2<<11)
#define TOK_ALIGN_BOTTOM  (3<<11)

#define TOK_INPUT_RADIO     (1<<22)  /* A radio button */
#define TOK_INPUT_SUBMIT    (2<<22)  /* Submit form if this is pressed */
#define TOK_INPUT_WRITEABLE (3<<22)  /* A writable icon */
#define TOK_INPUT_OPTION    (4<<22)  /* An option button */
#define TOK_INPUT_MENU      (5<<22)  /* A menu (NL separated items */
#define TOK_INPUT_TEXTAREA  (6<<22)  /* A text area */
#define TOK_INPUT_RESET     (7<<22)  /* Reset form if this is clicked */


/* HTML_get
   Get and start parsing a document specified by the given URL.

   url         -  The required document.
   app_handle  -  An application supplied handle for this request.
   *lib_handle -  The library's handle for the request.
   cache       -  Non 0 if URL is allowed to be cached by the library.
   async       -  Get refs as soon as possible.
   priority    -  Higher priority requests get processed first.


   Returns:    Error code, or 0 if none.
*/
extern int HTML_get(char *url,int app_handle,int *lib_handle,int cache,int async,int prority);

/* HTML_open
   Get and start parsing a document specified by the given file

   file        -  The required document.
   app_handle  -  An application supplied handle for this request.
   *lib_handle -  The library's handle for the request.
   cache       -  Non 0 if URL is allowed to be cached by the library.
   async       -  Get refs as soon as possible.
   priority    -  Higher priority requests get processed first.


   Returns:    Error code, or 0 if none.
*/
extern int HTML_open(char *file,int app_handle,int *lib_handle,int cache,int async,int prority);

/* HTML_close
   Tell library HTML document is no longer required

   lib_handle   -  The library's handle for the document.
*/
extern int HTML_Close(int lib_handle);

/* HTML_GetNextToken
   Get next token from specified document.

   lib_handle   -  The library's handle for the document.
   **token      -  The next token from the document.
*/
extern int HTML_GetNextToken(int lib_handle,HTMLToken **token);

/* HTML_FreeToken
   Free token from specified document.

   lib_handle   -  The library's handle for the document.
   *token       -  The next token to free.
*/
extern int HTML_FreeToken(int lib_handle,HTMLToken **token);

/* HTML_SetInputValue
   Set input value for a given field.

   lib_handle   -  The library's handle for the document.
   *field       -  The token for the field to set.
   value        -  The value to set (as 0 terminated string)
*/
extern int HTML_SetInputValue(int lib_handle,HTMLToken *field,char *value);

/* HTML_Follow
   Follow an anchor

   lib_handle   -  The library's handle for the document.
   *anchor      -  The token for the anchor to follow.
   *new_handle   - The library's handle for the new document.
*/
extern int HTML_Follow(int lib_handle,HTMLToken *anchor,int *new_handle);

/* HTML_GetURLHandle
   Get URLlib or file handle associated with document

   lib_handle   -  The library's handle for the document.
   *handle      -  The required handle;
*/
extern int HTML_GetURLHandle(int lib_handle,int *handle);

extern char HTML_LastError[];
