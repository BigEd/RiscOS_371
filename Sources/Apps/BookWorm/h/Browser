
  /***********************************************/
 /* Created by GenH2 v1.03 by Merlyn Kline 1992 */
/***********************************************/

#ifndef __Browser_h
#define __Browser_h

#ifndef __stdio_h
#include "stdio.h"
#endif
#ifndef __wimp_h
#include "wimp.h"
#endif
#ifndef __template_h
#include "template.h"
#endif
#ifndef __html_h
#include "html.h"
#endif
#ifndef __Panes_h
#include "Panes.h"
#endif
#ifndef __struct_h
#include "struct.h"
#endif
typedef enum bs_fetch
{
 BS_IDLE=0,
 BS_START,
 BS_STARTED,
 BS_IDENTIFY,
 BS_FETCHING,
 BS_DATAFETCH
} bs_fetch;
typedef struct browser
{
 struct browser *next;
 void *hdata;
 void *idata;
 void *fdata;
 void *source;
 char title[256];
 char status_str[200];
 wimp_w w;
 pane_data buttonbar;
 pane_data urlbar;
 pane_data status;
 pane_data terminator;
 template *t;
 template *t_u;
 template *t_b;
 template *t_s;
 int hsize;
 int fsize;
 int usize;
 int tsize;
 int dsize;
 int lsize;
 int hnum;
 int hpos;
 int animate;
 int lastframetime;
 int ntokens;
 int datasize;
 int nlines;
 int lbytes;
 int idle_count;
 int display_width;
 int max_width;
 bs_fetch status_fetch;
 int h_display;
 int h_fetch;
 int ptr_link;
 int reformat_extent;
 int reformat_width;
 int display_request;
 int display_request_offset;
 int suspend_format;
 int delayimages;
 int plainback;
 int last_reformat_token;
 HStream *stream;
 int nimages;
 int nforms;
 int lastimage;
 int backgroundcol;
 int linkcol;
 int textcol;
 int usedcol;
 int backimage;
 int aacol;
 int highlight;
 int bytes_fetched;
 BOOL reloading;
 void *extradata;
 FILE *savefile;
 int savetype;
 int savelink;
 int stoplooking;
} browser;
typedef struct browser_token
{
 int type;
 int flags;
 int length;
} browser_token;
#ifndef __Fetch_h
#include "Fetch.h"
#endif
#define BLOCKSIZE 256
#define FILEMETHOD "file://"
#define DEFAULT_HEIGHT 1320
#define BUTTONBAR_HEIGHT 80
#define URLBAR_HEIGHT 72
#define STATUS_HEIGHT 96
#define FILETYPE_TEXT (0xfff)
#define FILETYPE_HTML (0xfaf)
#define FILETYPE_SPRITE (0xff9)
#define FILETYPE_DRAW (0xaff)
#define FILETYPE_DATA (0xffd)
#define FILETYPE_PRINTOUT (0xff4)
#define CK_HIST 0
#define CK_FURL 1
#define CK_DURL 2
#define CK_TKNS 3
#define CK_DATA 4
#define CK_LINE 5
extern os_error *browser_destroy_source(browser *b);
extern os_error *browser_set_chunk_size_f(browser *b,int chunk,int size);
extern int browser_bar_height(browser *b);
extern int browser_token_to_line(browser *b,int token);
extern BOOL browser_show_token(browser *b,int token,int offset);
extern BOOL browser_display_local_reference_quietly(browser *b,char *url_requested,char *url_current);
extern int browser_line_at_y(browser *b,int y);
extern int browser_top_line(browser *b);
extern void browser_redraw_title(browser *b);
extern int ml_strncmpi(char *s1,char *s2,int maxlen);
extern os_error *browser_give_focus_general(browser *b);
extern os_error *browser_destroy_window_f(browser *b);
extern os_error *browser_destroy_all_f(void);
extern os_error *browser_update(browser *b,wimp_redrawstr *r,BOOL noback);
extern os_error *browser_update_token(browser *b,int token,BOOL noback);
extern os_error *browser_update_bottom(browser *b,int topy);
extern void browser_pointer_check(void *handle);
extern void browser_window_event(wimp_eventstr *e,void *handle);
extern os_error *browser_process_key(browser *b,int key);
extern os_error *browser_new_window_f(browser **handle);
extern char *browser_history(browser *b);
extern char *browser_current_url(browser *b);
extern char *browser_fetching_url(browser *b);
extern void browser_use_idle_events(browser *b);
extern BOOL browser_visited(char *url, BOOL stamp);
extern os_error * browser_record_global_history_f(char *url);
extern os_error *browser_show_url_f(browser *b,char *url,BOOL record);
extern os_error *browser_show_url_f(browser *b,char *url,BOOL record);
extern os_error *browser_new_view_f(char *url);
extern char *browser_pathname_to_url(char *path,int size);
extern void browser_fix_url(char *buffer,int bufsize);
extern os_error *browser_open_location(browser *b,BOOL file);
extern os_error *browser_forward_f(browser *b);
extern os_error *browser_back_f(browser *b);
extern os_error *browser_stop_f(browser *b,BOOL urgent);
extern os_error *browser_stop_all_f(BOOL urgent);
extern os_error *browser_find(browser *b);
extern os_error *browser_print(browser *b);
extern os_error *browser_set_all_button_states(void);
extern os_error *browser_update_all_status_text(void);
extern os_error *browser_update_all(void);
extern os_error *browser_reformat_all(void);
extern void browser_save_history(void);
extern void browser_lose_history(void);
extern void browser_load_history(void);
extern os_error *browser_mode_change(void);
extern void browser_highlight_token(browser *b,int token);
extern void browser_clear_highlight(browser *b,BOOL wait);
extern void browser_flash_token(browser *b,int token);
extern char *browser_authorise_username(char *host,char *realm);
extern char *browser_authorise_password(char *host,char *realm);
extern void browser_authorise_forget(char *host,char *realm);
extern os_error *browser_authorise_remember(char *host,char *realm,char *username,char *password);
extern os_error *browser_reload(browser *b);

#endif

