/*
 url.h
 Functions and constants used by URLlib
 (c) Copyright 1994 STNC Enterprises
*/

/* URL_SetDelayIndicator

   Indicates a function to be called by the library when a 
   long delay is expected during which the library will not return 
   to the caller.

   The supplied function fn is called with an argument of 1 before the delay
   starts,and 0 after the delay ends.

   Can be used to show an hourglass, or other delay indicator to the user.
*/
#define DELAY_REASON_LOOKUP 1
extern void URL_SetDelayIndicator(void (*fn)(int,int handle));

/* 
 URL_SetProxy
 Set proxy server's address and level
 
 proxy -> IP address or host name of proxy.
 level -> One of:
          URL_PROXY_FIRST  ask proxy first 
          URL_PROXY_ONLY   ask proxy only  
          URL_PROXY_LAST   ask proxy last

 Returns:    Error code, or 0 if none.

*/

#define URL_PROXY_FIRST  1
#define URL_PROXY_ONLY   2
#define URL_PROXY_LAST   3
extern int URL_SetProxy(char *proxy,int level);


/* URL_get
   Get a document specified by the given URL.

   url         -  The required document.
   app_handle  -  An application supplied handle for this request.
   *lib_handle -  The library's handle for the request.
   cache       -  Non 0 if URL is allowed to be cached by the library.
   priority    -  Higher priority requests get processed first.

   Returns:    Error code, or 0 if none.
*/
extern int URL_get(char *url,int app_handle,int *lib_handle,int cache,int prority);


/*
   URL_poll
   Poll the library for any events.


   *reason      - The event code.
   *app_handle  - The application handle to which the returned event
                  relates, or 0 if none.

   Returns:    Error code, or 0 if none.
*/
#define URL_REASON_NULL     0   /* No pending events */
#define URL_REASON_ACTIVE   1   /* No current events, but library active */
#define URL_REASON_SIZE     2   /* The document's size has become known */
#define URL_REASON_PARTIAL  3   /* Some, but not all, of the data has been
                                   received */
#define URL_REASON_COMPLETE 4   /* All data has been received */
#define URL_REASON_ERROR    5   /* An error has occured */
#define URL_REASON_SEB      6   /* Someone else will display the document */

extern int URL_poll(int *reason,int *app_handle);

/* URL_size 

   Get data size for a give URL

   lib_handle   - The library's handle for the request.
   *size        - The returned size.

   *size is -1 and URL_ERR_NOTYET is returned if the size is not yet known.

*/
extern int URL_size(int lib_handle,int *size);

/* URL_GetError

   Get last error associated with a request

   lib_handle   - The library's handle for the request.
*/

extern int URL_GetError(int lib_handle);

/* URL_GetState

   Get current state associated with a request

   lib_handle   - The library's handle for the request.
*/

#define REQUEST_STATE_IDLE       0
#define REQUEST_STATE_START      1
#define REQUEST_STATE_CONNECT    2
#define REQUEST_STATE_CONNECTED  3
#define REQUEST_STATE_WAIT       4
extern int URL_GetState(int lib_handle);



/* URL_PartialAck

   Request the library to generate additional URL_REASON_PARTIAL events
   if more data is received for the specified request.

   lib_handle   - The library's handle for the request.
*/

extern int URL_PartialAck(int lib_handle);

/* URL_GetType

   Get the type of the given document

   lib_handle  - The library's handle for the request.
   *type       - The document's RISC OS file type or one of:
                 URL_TYPE_UNKNOWN  - unknown type.
                 URL_TYPE_HTML     - HTML data.
                 
   convert     - Specifies wheather to apply conversion to
                 the document before passing it to the application.
*/
extern int URL_GetType(int lib_handle,int *type,int convert);

/* URL_Save 

   Save received data into a file 

   lib_handle - Library's handle for the request.
   file       - File to save data to.

*/
extern int URL_Save(int lib_handle, char *file);

/* URL_GetData

   Get data received by a given request.

   lib_handle     -     Library's handle for the request.
   *data_pointer  -     Offset into data to read from.
                        Updated to point to first unread data byte.
   buf            -     Buffer to read data into.
   *size          -     Amount in bytes to read.
                        Updated to show size actually read.
*/

extern int URL_GetData(int lib_handle,int *data_pointer,char *buf,int *size);

/* URL_DoDisplay

   Search for an external agent to display data received for a given URL.

   lib_handle     -     Library's handle for the request.
*/

extern int URL_DoDisplay(int lib_handle);

/* HTTP_Method

   Apply a given method to a URL.

   url    - URL to apply method to.
   method - Method name.
   file   - If not NULL, body of request.
*/
extern int HTTP_Method(char *url,char *method,char *file);

                                     
/* URL_SetUserAgent
   Set name of host applcation
 */
extern int URL_SetUserAgent(char *app_name);
                                    
/* URL_Free
   Tel library we are no longer interested in this URL 
   Aborts any transfers in progress.
   Deletes temp. file, if not a cached URL
*/
extern int URL_Free(int lib_handle);

/* Errors returned by the above routines:

   <0 Library error.
    0 No error.
   >0 RISC OS Error.
*/
           
#define URL_ERR_NONE              0
#define URL_ERR_NOTYET           -1
#define URL_ERR_EOF              -2
#define URL_ERR_CANT             -3
#define URL_ERR_UNKNOWN_PROTOCOL -4
#define URL_ERR_NOMEM            -5
#define URL_ERR_NOSOCKET         -6
#define URL_ERR_BINDFAIL         -7
#define URL_ERR_UNKNOWN_HOST     -8
#define URL_ERR_BADURL           -9
#define URL_ERR_NONBLOCK_FAIL   -10
#define URL_ERR_CONNECT_FAIL    -11
#define URL_ERR_RECV_FAIL       -12
#define URL_ERR_SEND_FAIL       -13
#define URL_ERR_FAIL            -14 /* Failed to get object */

/* Text for last error returned by a URLlib function */

extern char URL_LastError[];   

