
/*

    Library allows use of sliders in windows. Event handler for window should
    detect drag on icon and do something like:

        if(slider_is_slider(event->data.but.m.w,event->data.but.m.i)
          wimpt_complain(slider_slide(0,(ont)&event->data.but.m));

    And the redraw loop should contain something like:

        slider_draw_icons(r->w,&r->g,&c);

    A slider icon is identified by needing help for redraw and by having a
    validation string starting with '>'. This may be followed by a string
    which links another icon to display the value. This string is of the form:

        <icon>=<low>-<high>                 eg 1=1:100;

    Just after creating the window from the template, call:

        slider_validate_icons(w);

    To initialise a slider, call:

        slider_set_value(w,i,value);

    To read a slider's value, call:

        slider_read_value(w,i);

:HISTORY
    10/11/92  MK   First draught
:END

*/

#include "stdio.h"
#include "string.h"
#include "stdlib.h"

/*------------------------------------------------------------------------*/
#include "wimp.h"
#include "win.h"
#include "wimpt.h"
#include "coords.h"

#include "Bone.h"
#include "3dstuff.h"
#include "Graphics.h"

/*------------------------------------------------------------------------*/
#define NOSLIDERS

#define MAXBUTTONS 200

#ifdef SLIDERS

os_error *slider_slide(int reason,int p0);
void slider_draw_icons(wimp_w w,wimp_box *g,coords_cvtstr *c);

void slide__handler(wimp_eventstr *e,void *handle)
{
switch(e->e)
  {
  case wimp_ECLOSE:
  case wimp_EUSERDRAG:
    wimpt_complain(slider_slide(3,0));
    break;
  case wimp_ENULL:
    wimpt_complain(slider_slide(1,0));
    break;
  }
wimpt_complain(slider_slide(2,(int)e));
}

static void slider__decode_string(char *p,int *icon,int *top,int *bottom)
{
int t;

*icon=atoi(p);
while(*p&&*p!='=') p++;
if(*p) *bottom=atoi(++p); else *bottom=0;
while(*p&&*p!=':') p++;
if(*p) *top=atoi(++p); else *top=100;
if(*top<*bottom) {t=*top; *top=*bottom; *bottom=t;}
}

static void slider__set_value(int x,wimp_icon *info,wimp_w w,int i)
{
char *p;

sprintf(info->data.indirecttext.buffer,"\r %d",x);
p=info->data.indirecttext.validstring+1;
if(*p)
  {
  int           icon,top,bottom,t;
  wimp_icon     op;
  wimp_caretstr c;

  slider__decode_string(p,&icon,&top,&bottom);
  t=info->box.x1-info->box.x0-8;
  t=((x*(top-bottom))/t)+bottom;
  wimp_get_icon_info(w,icon,&op);
  if(op.flags&wimp_INDIRECT)
    {
    sprintf(op.data.indirecttext.buffer,"%d",t);
    wimp_get_caret_pos(&c);
    if(c.i==icon && c.w==w)
      {
      c.index=strlen(op.data.indirecttext.buffer);
      wimp_set_caret_pos(&c);
      }
    wimp_set_icon_state(w,icon,0,0);
    }
  }
}

static void slider__read(wimp_icon *info,wimp_wstate *state,coords_cvtstr *c,
                  int *x,wimp_mousestr *m)
{
wimp_get_icon_info(m->w,m->i,info);
wimp_get_wind_state(m->w,state);
c->box=state->o.box;
c->scx=state->o.x;
c->scy=state->o.y;
*x=coords_x_toworkarea(m->x,c);
if(*x<info->box.x0+4) *x=info->box.x0+4;
if(*x>info->box.x1-5) *x=info->box.x1-5;
*x-=info->box.x0+4;
}

void slider__idle(void *handle)
{
wimpt_complain(slider_slide(1,0));
}

#endif

/*------------------------------------------------------------------------*/
#ifdef SLIDERS
/*------------------------------------------------------------------------*/
BOOL slider_is_slider(wimp_w w,int i)
{
wimp_icon info;
char      *p=NULL;

if(i<0) return(FALSE);
wimp_get_icon_info(w,i,&info);
if((info.flags&(wimp_IREDRAW|wimp_INDIRECT|wimp_IDELETED|wimp_ITEXT))==
   (wimp_IREDRAW|wimp_INDIRECT|wimp_ITEXT))
  p=info.data.indirecttext.validstring;
if((int)p<0x8000 || *p!='>') return(FALSE);
return(TRUE);
}
/*------------------------------------------------------------------------*/
#else
/*------------------------------------------------------------------------*/
#define slider_is_slider(a,b) FALSE
/*------------------------------------------------------------------------*/
#endif

/*------------------------------------------------------------------------*/
#ifdef SLIDERS
/*------------------------------------------------------------------------*/
os_error *slider_slide(int reason,int p0)
{
/*
   Reason                     p0
   -------------------------- -----------------------------
   0 Start slide              wimp_mousestr *
   1 Null event               NULL
   2 Pass on event            wimp_eventstr *
   3 End drag                 NULL
*/
wimp_icon     info;
wimp_wstate   state;
coords_cvtstr c;
static wimp_w            slidew=-1;
static int               slidei;
static win_event_handler oldhandler;
static void              *oldhandle;
static int               lastx;

switch(reason)
  {
  case 0:
    {
    int            x;
    wimp_dragstr   drag;

    slider_slide(3,0);
    slidew=((wimp_mousestr*)p0)->w;
    slidei=((wimp_mousestr*)p0)->i;
    slider__read(&info,&state,&c,&x,(wimp_mousestr*)p0);
    slider__set_value(lastx=x,&info,slidew,slidei);
    coords_box_toscreen(&info.box,&c);
    drag.parent=info.box;
    drag.parent.x0+=4;
    drag.parent.x1-=5;
    drag.type=wimp_USER_HIDDEN;
    drag.window=slidew;
    wimp_drag_box(&drag);
    if(!win_read_eventhandler(slidew,&oldhandler,&oldhandle))
      {
      oldhandle=NULL;
      oldhandler=NULL;
      }
    win_claim_unknown_events(slidew);
    win_register_event_handler(slidew,slide__handler,0);
    wimp_set_icon_state(slidew,slidei,0,0);
    idle_register_user(slider__idle,NULL,FALSE);
    } break;
  case 1:
    {
    int            x;
    wimp_mousestr  m;
    wimp_redrawstr r;

    wimp_get_point_info(&m);
    m.w=slidew; m.i=slidei;
    slider__read(&info,&state,&c,&x,&m);
    r.box.x0=info.box.x0+x;
    r.box.x1=info.box.x0+lastx;
    r.box.y0=info.box.y0;
    r.box.y1=info.box.y1;
    if(x!=lastx)
      {
      int more;

      slider__set_value(lastx=x,&info,slidew,slidei);
      if(r.box.x0>r.box.x1) {int t=r.box.x0; r.box.x0=r.box.x1; r.box.x1=t;}
      r.box.x1+=8;
      r.w=slidew;
      if(r.box.x0<info.box.x0+16) r.box.x0=info.box.x0;
      if(r.box.x1>info.box.x1) r.box.x1=info.box.x1;
      wimp_update_wind(&r,&more);
      graphics_checkmode(FALSE);
      c.scy=r.scy;
      c.scx=r.scx;
      c.box=r.box;
      while(more)
        {
        slider_draw_icons(r.w,&r.g,&c);
        wimp_get_rectangle(&r,&more);
        }
      }
    } break;
  case 2:
    if(oldhandler) oldhandler((wimp_eventstr*)p0,oldhandle);
    break;
  case 3:
    if(slidew>=0)
      {
      win_register_event_handler(slidew,oldhandler,oldhandle);
      idle_deregister_user(slider__idle,NULL);
      slidew=-1;
      }
    break;
  }
return(NULL);
}
/*------------------------------------------------------------------------*/
#else
/*------------------------------------------------------------------------*/
#define slider_slide(a,b) NULL
/*------------------------------------------------------------------------*/
#endif

/*------------------------------------------------------------------------*/
#ifdef SLIDERS
/*------------------------------------------------------------------------*/
void slider_draw_icons(wimp_w w,wimp_box *g,coords_cvtstr *c)
{
/*
   Draws all the slider icons in a window
*/
wimp_i           ilist[MAXBUTTONS];
int              i;
wimp_which_block block;

block.window=w;
block.bit_set=block.bit_mask=wimp_IREDRAW|wimp_INDIRECT;
wimp_which_icon(&block,&ilist[0]);
i=0;
while(ilist[i]>=0)
  {
  if(slider_is_slider(w,ilist[i]))
    d3_draw_slider(w,ilist[i],g,c);
  i++;
  }
}
/*------------------------------------------------------------------------*/
#else
/*------------------------------------------------------------------------*/
#define slider_draw_icons(a,b,c) NULL
/*------------------------------------------------------------------------*/
#endif

/*------------------------------------------------------------------------*/
#ifdef SLIDERS
/*------------------------------------------------------------------------*/
void slider_validate_icons(wimp_w w)
{
/*
   Validates all the slider icons in a window and sets flags etc
*/
wimp_i           ilist[MAXBUTTONS];
int              i;
wimp_which_block block;
wimp_icon        info;

block.window=w;
block.bit_set=block.bit_mask=wimp_IREDRAW|wimp_INDIRECT;
wimp_which_icon(&block,&ilist[0]);
i=0;
while(ilist[i]>=0)
  {
  if(slider_is_slider(w,ilist[i]))
    {
    wimp_get_icon_info(w,ilist[i],&info);
    sprintf(info.data.indirecttext.buffer,"\r 0");
    wimp_set_icon_state(w,ilist[i],0,wimp_IBORDER|wimp_IFILLED);
    }
  i++;
  }
}
/*------------------------------------------------------------------------*/
#else
/*------------------------------------------------------------------------*/
#define slider_validate_icons(a) NULL
/*------------------------------------------------------------------------*/
#endif

/*------------------------------------------------------------------------*/
#ifdef SLIDERS
/*------------------------------------------------------------------------*/
void slider_set_value(wimp_w w,int i,int value)
{
/*
   Sets value on slider
*/
wimp_icon        info;
int              icon,top,bottom,t;

wimp_get_icon_info(w,i,&info);
slider__decode_string(info.data.indirecttext.validstring,&icon,&top,&bottom);
if(value>top) value=top; else if(value<bottom) value=bottom;
t=info.box.x1-info.box.x0-8;
t=(t*value+(top-bottom)/2)/(top-bottom);
slider__set_value(t,&info,w,i);
wimp_set_icon_state(w,i,0,0);
}
/*------------------------------------------------------------------------*/
#else
/*------------------------------------------------------------------------*/
#define slider_set_value_icons(a,b,c) NULL
/*------------------------------------------------------------------------*/
#endif

/*------------------------------------------------------------------------*/
#ifdef SLIDERS
/*------------------------------------------------------------------------*/
int slider_read_value(wimp_w w,int i)
{
/*
   Reads value on slider
*/
wimp_icon        info;
int              icon,top,bottom,t,x;

wimp_get_icon_info(w,i,&info);
slider__decode_string(info.data.indirecttext.validstring,&icon,&top,&bottom);
x=atoi(info.data.indirecttext.buffer+2);
t=info.box.x1-info.box.x0-8;
t=((x*(top-bottom))/t)+bottom;
return(t);
}
/*------------------------------------------------------------------------*/
#else
/*------------------------------------------------------------------------*/
#define slider_read_value_icons(a,b) NULL
/*------------------------------------------------------------------------*/
#endif
