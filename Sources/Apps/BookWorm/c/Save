/*

  Merlyn Kline, 1995

:NOTES

General purpose file saving stuff for wimp based apps

To use, call save_saveas() passing the name of the save procedure.
This procedure should save the data by (optionally repetitive) calls to
save_write_bytes() which will behave differently depending on whether a ram
transfer or a file save is going on.

It is best to try and call save_write_bytes() with the largest possible
amount of data passed in each call.

:END

:MESSAGES
:END

:HISTORY
:END

*/

#include "stdlib.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"

#include "kernel.h"
/*----------------------------------------------------------------------*/
#include "xfersend.h"
#include "saveas.h"
/*----------------------------------------------------------------------*/
#include "os.h"
#include "wimpt.h"

#include "ErrorGen.h"
/*----------------------------------------------------------------------*/
#include "Defs.h"
#include "Save.h"

#if 0

/*----------------------------------------------------------------------*/
typedef BOOL (*save_saveproc)(void *handle,char *path);
/* a procedure that attempts to do the write and returns a flag indicating success
   It is passed handle, as passed into save_saveas(), and pathname, the file being
   saved (NULL for RAM transfers), for recording by the client */

#endif

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static save_saveproc save_client_saver=NULL;
static int           save_buffsize=0;
static int           save_filetype;
static FILE          *save_handle=NULL; /* file handle to save to, NULL=send */
static char          *save_buffer=NULL;

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static void save_tidy_up(void)
{
  if(save_buffer) free(save_buffer);
  save_buffer=NULL;
  save_buffsize=0;
  if(save_handle) fclose(save_handle);
  save_handle=NULL;
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static BOOL save_sender(void *handle,int *maxbuf)
{
  BOOL e;
  int  size;

  save_tidy_up();
  size=*maxbuf;
  while(!save_buffer && size>0)
  {
    save_buffer=malloc(size);
    if(!save_buffer)
    {
      size/=2;
      if(size<512 && size<*maxbuf/4) size=0;
    }
  }
  if(!save_buffer) {errorgen_complain(2); return(FALSE);}
  save_buffsize=size;
  e=save_client_saver(handle,NULL);
  save_tidy_up();
  return(e);
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static BOOL save_saver(char *filename,void *handle)
{
  BOOL e;
  char cmd[300];

  save_handle=fopen(filename,"wb");
  if(strlen(filename)<sizeof(cmd)-15)
  {
    sprintf(cmd,"SetType %s %03x",filename,save_filetype);
    os_cli(cmd);
  }
  if(!save_handle) {wimpt_complain((os_error*)_kernel_last_oserror()); e=FALSE;}
  else e=save_client_saver(handle,filename);
  save_tidy_up();
  return(e);
}

/*----------------------------------------------------------------------*/
BOOL save_write_bytes(char *data,int bytes)
{ /* write bytes to save target, return flag indicating success */
  if(save_handle)
  {
    if(fwrite(data,1,bytes,save_handle)!=bytes)
    {
      wimpt_complain((os_error*)_kernel_last_oserror());
      save_tidy_up();
      return(FALSE);
    }
  }
  else
  {
    int from,to;

    from=0;
    while(from<bytes)
    {
      to=0;
      while((to<save_buffsize)&&(from<bytes))
      {
        *(save_buffer+(to++))=*(data+(from++));
      }
      if(!xfersend_sendbuf(save_buffer,to)) return(FALSE);
    }
  }
  return(TRUE);
}

/*----------------------------------------------------------------------*/
BOOL save_saveas(int type,char *name,int size,
                 save_saveproc saveproc,xfersend_printproc printproc,void *handle)
{
  save_client_saver=saveproc;
  save_filetype=type;
  return(saveas(type,name,size,save_saver,save_sender,printproc,handle));
}
