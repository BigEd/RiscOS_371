/*************************************************/
/* File   : Utils.c                              */
/* Purpose: Infrequently altered utilities       */
/* Author : A.D.Hodgkinson                       */
/* History: 18-Oct-96: Created                   */
/*          03-Feb-97: Altered to compile with   */
/*                     RISCOS_Lib, many things   */
/*                     taken out as a result.    */
/*************************************************/

#include "stdlib.h"
#include "stdio.h"
#include "string.h"
#include "stdarg.h"

#include "swis.h"
#include "kernel.h"

#include "wimp.h"
#include "wimpt.h"
#include "os.h"
#include "win.h"
#include "dbox.h"
#include "print.h"
#include "help.h"
#include "msgs.h"

#include "Browser.h"
#include "Printing.h"
#include "Utils.h"

/* Constant definitions */

#define MillipointsPerOSUnit 400

/*************************************************/
/* intersection()                                */
/*                                               */
/* Takes two wimp_boxes and returns a pointer to */
/* a third which is the the intersection between */
/* the first two, or NULL, if they don't         */
/* intersect.                                    */
/*                                               */
/* Parameters: Pointer to a wimp_box;            */
/*             Pointer to another wimp_box.      */
/*                                               */
/* Returns:    Pointer to a wimp_box which is    */
/*             the intersection of the given two */
/*             or NULL, if they don't intersect. */
/*************************************************/

#define max(a,b) ((a) > (b) ? (a) : (b))
#define min(a,b) ((a) < (b) ? (a) : (b))

wimp_box * intersection(wimp_box * a, wimp_box * b)
{
  static wimp_box intersect;

  if (!a || !b) return NULL;

  if ((a->x0 >= b->x1) || (a->x1 <= b->x0) || (a->y0 >= b->y1) || (a->y1 <= b->y0)) return NULL;

  intersect.x0 = max(a->x0,b->x0);
  intersect.x1 = min(a->x1,b->x1);
  intersect.y0 = max(a->y0,b->y0);
  intersect.y1 = min(a->y1,b->y1);

  return &intersect;
}

/*************************************************/
/* convert_pair_to_os()                          */
/*                                               */
/* Converts from millipoints to OS units, using  */
/* Font_ConverttoOS or a constant (see below).   */
/*                                               */
/* This is needed as it would appear that during */
/* a print job, this call may *not* be used,     */
/* contrary to the information on PRM 3-573.     */
/* This bug caused *severe* grief during the     */
/* development of the print routines...          */
/*                                               */
/* If the 'printing' global flag is set, the     */
/* conversion is done with the constant          */
/* 'MillipointsPerOSUnit' defined at the top of  */
/* of this source file, since there is no other  */
/* way to do the conversion!                     */
/*                                               */
/* Parameters: A coordinate in millipoints;      */
/*             Another coord in millipoints;     */
/*             Pointer to an int into which the  */
/*             first coordinate, converted to OS */
/*             units, is placed;                 */
/*             Similarly a pointer to an int for */
/*             the second coordinate.            */
/*                                               */
/* Assumes:    The pointers may not be NULL. The */
/*             input and output variables may be */
/*             the same (so passing in x, y, &x, */
/*             &y would work correctly).         */
/*************************************************/

_kernel_oserror * convert_pair_to_os(int x, int y, int * osx, int * osy)
{
  /* Use the SWI if not printing */

  if (!printing)
  {
    return _swix(Font_ConverttoOS,
                 _INR(1,2) | _OUTR(1,2),

                 x,
                 y,

                 osx,
                 osy);
  }

  /* Scale using a predefined constant (see top of source file) */

  else
  {
    *osx = x / MillipointsPerOSUnit;
    *osy = y / MillipointsPerOSUnit;
  }

  return NULL;
}

/*************************************************/
/* convert_pair_to_points()                      */
/*                                               */
/* Converts from OS units to millipoints, using  */
/* Font_Converttopoints or a constant (see       */
/* below).                                       */
/*                                               */
/* This is needed as it would appear that during */
/* a print job, this call may *not* be used,     */
/* contrary to the information on PRM 3-573.     */
/*                                               */
/* If the 'printing' global flag is set, the     */
/* conversion is done with the constant          */
/* 'MillipointsPerOSUnit' defined at the top of  */
/* of this source file, since there is no other  */
/* way to do the conversion!                     */
/*                                               */
/* Parameters: A coordinate in OS units;         */
/*             Another coordinate in OS units;   */
/*             Pointer to an int into which the  */
/*             first coordinate, converted to    */
/*             millipoints, is placed;           */
/*             Similarly a pointer to an int for */
/*             the second coordinate.            */
/*                                               */
/* Assumes:    The pointers may not be NULL. The */
/*             input and output variables may be */
/*             the same (so passing in x, y, &x, */
/*             &y would work correctly).         */
/*************************************************/

_kernel_oserror * convert_pair_to_points(int x, int y, int * mpx, int * mpy)
{
  /* Use the SWI if not printing */

  if (!printing)
  {
    return _swix(Font_Converttopoints,
                 _INR(1,2) | _OUTR(1,2),

                 x,
                 y,

                 mpx,
                 mpy);
  }

  /* Scale using a predefined constant (see top of source file) */

  else
  {
    *mpx = x * MillipointsPerOSUnit;
    *mpy = y * MillipointsPerOSUnit;
  }

  return NULL;
}

/*************************************************/
/* convert_to_os()                               */
/*                                               */
/* As convert_pair_to_os() (above), but only     */
/* converts one coordinate at a time.            */
/*                                               */
/* Parameters: An x coordinate in millipoints;   */
/*             Pointer to an int into which the  */
/*             coordinate, converted to OS       */
/*             units, is placed.                 */
/*                                               */
/* Assumes:    That the pointer is not NULL. The */
/*             input and output variable may be  */
/*             the same (so passing in x, &x     */
/*             would work correctly).            */
/*************************************************/

_kernel_oserror * convert_to_os(int x, int * osx)
{
  /* Use the SWI if not printing */

  if (!printing)
  {
    return _swix(Font_ConverttoOS,
                 _INR(1,2) | _OUT(1),

                 x,
                 0,

                 osx);
  }

  /* Scale using a predefined constant (see top of source file) */

  else *osx = x / MillipointsPerOSUnit;

  return NULL;
}

/*************************************************/
/* convert_to_points()                           */
/*                                               */
/* As convert_pair_to_points() (above), but only */
/* converts one coordinate at a time.            */
/*                                               */
/* Parameters: An x coordinate in OS units;      */
/*             Pointer to an int into which the  */
/*             coordinate, converted to milli-   */
/*             points, is placed.                */
/*                                               */
/* Assumes:    That the pointer is not NULL. The */
/*             input and output variable may be  */
/*             the same (so passing in x, &x     */
/*             would work correctly).            */
/*************************************************/

_kernel_oserror * convert_to_points(int x, int * mpx)
{
  /* Use the SWI if not printing */

  if (!printing)
  {
    return _swix(Font_Converttopoints,
                 _INR(1,2) | _OUT(1),

                 x,
                 0,

                 mpx);
  }

  /* Scale using a predefined constant (see top of source file) */

  else *mpx = x * MillipointsPerOSUnit;

  return NULL;
}

/*************************************************/
/* convert_box_to_os()                           */
/*                                               */
/* As convert_pair_to_os() (above), but converts */
/* the four coordinates inside a wimp_box in one */
/* go.                                           */
/*                                               */
/* Parameters: Pointer to a wimp_box containing  */
/*             coords in millipoints;            */
/*             Pointer to a wimp_box into which  */
/*             the first box's coords, converted */
/*             to OS units, are placed.          */
/*                                               */
/* Assumes:    That neither pointer is NULL. The */
/*             two pointers may be the same (so  */
/*             passing in &box, &box would work  */
/*             correctly).                       */
/*************************************************/

_kernel_oserror * convert_box_to_os(const wimp_box * mp, wimp_box * os)
{
  _kernel_oserror * e;

  /* Use the SWI if not printing */

  if (!printing)
  {
    e = _swix(Font_ConverttoOS,
              _INR(1,2) | _OUTR(1,2),

              mp->x0,
              mp->y0,

              &os->x0,
              &os->y0);

    if (e) return e;

    return _swix(Font_ConverttoOS,
                 _INR(1,2) | _OUTR(1,2),

                 mp->x1,
                 mp->y1,

                 &os->x1,
                 &os->y1);
  }

  /* Scale using a predefined constant (see top of source file) */

  else
  {
    os->x0 = mp->x0 / MillipointsPerOSUnit;
    os->y0 = mp->y0 / MillipointsPerOSUnit;
    os->x1 = mp->x1 / MillipointsPerOSUnit;
    os->y1 = mp->y1 / MillipointsPerOSUnit;
  }

  return NULL;
}

/*************************************************/
/* convert_box_to_points()                       */
/*                                               */
/* As convert_pair_to_points() (above), but      */
/* converts the four coordinates inside a        */
/* wimp_box in one go.                           */
/*                                               */
/* Parameters: Pointer to a wimp_box containing  */
/*             coords in OS units;               */
/*             Pointer to a wimp_box into which  */
/*             the first box's coords, converted */
/*             to millipoints, are placed.       */
/*                                               */
/* Assumes:    That neither pointer is NULL. The */
/*             two pointers may be the same (so  */
/*             passing in &box, &box would work  */
/*             correctly).                       */
/*************************************************/

_kernel_oserror * convert_box_to_points(const wimp_box * os, wimp_box * mp)
{
  _kernel_oserror * e;

  /* Use the SWI if not printing */

  if (!printing)
  {
    e = _swix(Font_Converttopoints,
              _INR(1,2) | _OUTR(1,2),

              os->x0,
              os->y0,

              &mp->x0,
              &mp->y0);

    if (e) return e;

    return _swix(Font_Converttopoints,
                 _INR(1,2) | _OUTR(1,2),

                 os->x1,
                 os->y1,

                 &mp->x1,
                 &mp->y1);
  }

  /* Scale using a predefined constant (see top of source file) */

  else
  {
    mp->x0 = os->x0 * MillipointsPerOSUnit;
    mp->y0 = os->y0 * MillipointsPerOSUnit;
    mp->x1 = os->x1 * MillipointsPerOSUnit;
    mp->y1 = os->y1 * MillipointsPerOSUnit;
  }

  return NULL;
}
