/************************************************************************/
/* © Acorn Computers Ltd, 1992.                                         */
/*                                                                      */
/* This file forms part of an unsupported source release of RISC_OSLib. */
/*                                                                      */
/* It may be freely used to create executable images for saleable       */
/* products but cannot be sold in source form or as an object library   */
/* without the prior written consent of Acorn Computers Ltd.            */
/*                                                                      */
/* If this file is re-distributed (even if modified) it should retain   */
/* this copyright notice.                                               */
/*                                                                      */
/************************************************************************/

/* Title:   c.saveas
 * Purpose: generalised data transfer to a concurrent wimp program.
 * History: IDJ: 06-Feb-92: prepared for source release
 *          MK:  19-Jul-94: fixed for variable template (see below)


     Variable templates
     ~~~~~~~~~~~~~~~~~~
     The new style guide indicates that saveas boxes should have an option
     icon for 'Selection' plus perhaps others. This can now be achieved as follows:
        1. Define a procedure like:
                dbox saveas_creator(void)
           which creates a dbox (using dbox_new), sets the state of any extra icons
           and returns the handle (or 0 to indicate failure).
        2. Call saveas_register_create_proc(saveas_creator) with the name of your
           procedure as the parameter. This tells saveas to call your procedure instead
           of dbox_new("xfer_send") when creating the dialogue. This must be done
           immediately before every call to saveas() since the call to saveas() will
           de-register the procedure.
        3. Call saveas() as usual.
        4. In your processor for save, send or print you can call
           saveas_getnumeric(field) to read the status of a field off the dialogue and
           thus decide whther to save selection only, etc.

:MESSAGES
saveas1:To save, drag the icon to a directory display.
SAVEAS:This is a save dialogue.|MEnter a pathname and click OK or drag the icon to save.
SAVEAS3:Drag this icon to a directory display to save in that directory.
SAVEAS2:Enter a filename or pathname in this field.
SAVEAS1:Click SELECT to cancel the save operation.
SAVEAS0:Click SELECT to start the save operation.
:END

 */


/*------------------------------------------------------------------------*/
#ifndef BOOL
/*------------------------------------------------------------------------*/
#define BOOL int
/*------------------------------------------------------------------------*/
#define TRUE 1
/*------------------------------------------------------------------------*/
#define FALSE 0
/*------------------------------------------------------------------------*/
#endif

#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "os.h"
#include "bbc.h"
#include "wimp.h"
#include "wimpt.h"
#include "win.h"
/*------------------------------------------------------------------------*/
#include "dbox.h"
/*------------------------------------------------------------------------*/
#include "xfersend.h"
#include "fileicon.h"
#include "werr.h"
#include "menu.h"
#include "event.h"
#include "msgs.h"
#include "help.h"

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
#define saveas_FOK     0           /* OK action button */
#define saveas_FName   2           /* name field */
#define saveas_FIcon   3           /* icon to drag. */

/*------------------------------------------------------------------------*/
typedef dbox (*saveas_create_proc)(void);

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static int saveas__filetype;
static xfersend_saveproc  saveas__saveproc;
static xfersend_sendproc  saveas__sendproc;
static xfersend_printproc saveas__printproc;
static void *saveas__savehandle;
static int saveas__estsize = 0;
static char *filename;  /*[256]*/
static dbox saveas__d ;
static saveas_create_proc  saveas__create_proc;

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static BOOL saveas__wimpevents(dbox d, void *ev, void *handle)
{
   wimp_eventstr *e = (wimp_eventstr*) ev;

/*   tracef1("saveas raw event %i.\n", e->e); */

   if (help_dboxrawevents(d, ev, "SAVEAS")) return TRUE; /* handle interactive help */

   switch (e->e)
   {
      case wimp_EBUT:
/*        tracef1("saveas ebut %x\n",e->data.but.m.bbits) ; */
        if (e->data.but.m.bbits == wimp_BDRAGLEFT &&
            e->data.but.m.i==saveas_FIcon)
        {
          dbox_getfield(d, saveas_FName, filename, 256);
          xfersend(saveas__filetype, filename, saveas__estsize,
                   saveas__saveproc, saveas__sendproc,
                   saveas__printproc, e, handle);
          return TRUE;
        }
      break;
   }

   return FALSE;
}


/*------------------------------------------------------------------------*/
int saveas_getfield(dbox_field field)
{
   if (!saveas__d) return 0;
   return dbox_getnumeric(saveas__d,field);
}


/*------------------------------------------------------------------------*/
void saveas_register_create_proc(saveas_create_proc proc)
{
   saveas__create_proc=proc;
}


/*------------------------------------------------------------------------*/
BOOL saveas(int filetype, char *name, int estsize,
            xfersend_saveproc  saveproc,
            xfersend_sendproc  sendproc,
            xfersend_printproc printproc,
            void *handle)
{
   if (saveas__d) {saveas__create_proc = NULL; return FALSE;}
   if (filename == 0) filename = malloc(256);
   if (saveas__create_proc)
     saveas__d = saveas__create_proc();
   else
     saveas__d = dbox_new("xfer_send");
   saveas__create_proc = NULL;
   if (saveas__d == 0) return FALSE;

   saveas__filetype   = filetype;
   saveas__saveproc   = saveproc;
   saveas__sendproc   = sendproc;
   saveas__printproc  = printproc;
   saveas__savehandle = handle;
   saveas__estsize    = estsize;

   dbox_show(saveas__d);
   xfersend_close_on_xfer(TRUE, dbox_syshandle(saveas__d));

   fileicon((wimp_w) dbox_syshandle(saveas__d), saveas_FIcon, filetype);

   dbox_raw_eventhandler(saveas__d, saveas__wimpevents, saveas__savehandle);
   dbox_setfield(saveas__d, saveas_FName, name);
   strncpy(filename, name, 256);

   while (dbox_fillin(saveas__d) == saveas_FOK)
   {
      dbox_getfield(saveas__d, saveas_FName, filename, 256);

      /* Check for name with no "." in it, and complain if so. */
      {
         int i = 0;
         BOOL dot = FALSE;
         while ((! dot) && filename[i] != 0) dot = filename[i++] == '.';

         if (! dot)
         {
            werr(FALSE, msgs_lookup("saveas1:To save, drag the icon to a directory display."));
            continue;
         }
      }

      xfersend_set_fileissafe(TRUE);

      if (saveas__saveproc(filename, saveas__savehandle) == TRUE &&
          !dbox_persist()) break;
   }
   /* Assert: !...FOK || saveas__saveproc() && !...adjust */

/*   tracef0("saveas loop done.\n"); */
   xfersend_close_on_xfer(FALSE, 0);
   xfersend_clear_unknowns();
   dbox_hide(saveas__d);
   dbox_dispose(&saveas__d);
   saveas__d = 0;

   return TRUE;
}

/*------------------------------------------------------------------------*/
void saveas_read_leafname_during_send(char *name, int length)
{
   int i ;
   char filename[256];
   dbox_getfield(saveas__d, saveas_FName, filename, 256);

   i = strlen(filename)-1 ;
   while (i>=0 && filename[i] != '.') i-- ;

   strncpy(name, &filename[i+1], length) ;
}

/* end saveas.c */
