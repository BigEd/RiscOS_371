#include "bbc.h"
#include "string.h"
#include <stdio.h>
#include <stdarg.h>
/*------------------------------------------------------------------------*/
#include "flex.h"
/*------------------------------------------------------------------------*/
#include "wimp.h"
/*------------------------------------------------------------------------*/
#define FLEXTRACE 0
/*------------------------------------------------------------------------*/
#define TRACE 0

#include "mflex.h"

/*

 This module provides trace facilities. They can all be reduced to nil code
 producing macros by setting the definitions of FLEXTRACE AND TRACE to
 values other than 1. Facilities are as follows:

     void trace(char *s)
     places the string provided in the top right corner of the screen. A
     list of the last 10 (TRACELINES) strings is stored and updated each
     time the routine is called. The graphics window is preserved so
     redraw routines can be traced.

     void trace_flash(void)
     flashes the current graphics window (useful in re-draw routines)

     void *FLEXPTR(flex_ptr flexblock, int offset)
     calculates a pointer into a flexblock by adding the offset to the address
     of the block. If FLEXTRACE==1 then it simultaneously checks the integrity
     of the flexblock and traces flexid if the check fails.

     void FLEXCHECK(flex_ptr flexblock,char *flexid)
     If FLEXTRACE==1 then checks the integrity
     of a flexblock and traces flexid if the check fails.
*/


#define TRACELINES 14
#define TRACEWIDTH 40

/*------------------------------------------------------------------------*/
#if TRACE==1
/*------------------------------------------------------------------------*/
void trace(char *s)
{
static int   tracepoint;
static char  tracestuff[(TRACEWIDTH+1)*TRACELINES];
static int   initialised=0;
int          i,j;
char         *p;
int          gx0,gy0,gx1,gy1;

if(bbc_inkey(-3)) return;
if((*s=='*' && !*(s+1)) || !initialised)
  {
  p=tracestuff;
  tracepoint=0;
  for(i=0;i<TRACELINES;i++)
    {
    for(j=0;j<TRACEWIDTH;j++)
      *p++=' ';
    *p++=0;
    }
  initialised=1;
  if(*s=='*' && !*(s+1)) return;
  }
j=strlen(s);
for(i=0;i<TRACEWIDTH;i++)
  tracestuff[i+(TRACEWIDTH+1)*tracepoint]=i<j?(s[i]>=' '?s[i]:0xa7):' ';
tracepoint++;
if(tracepoint==TRACELINES) tracepoint=0;
i=tracepoint;
j=0;
gx0=bbc_vduvar(128)<<bbc_vduvar(4);
gy0=bbc_vduvar(129)<<bbc_vduvar(5);
gx1=bbc_vduvar(130)<<bbc_vduvar(4);
gy1=bbc_vduvar(131)<<bbc_vduvar(5);
bbc_vdu(4);
bbc_vdu(26);
do
  {
  bbc_tab(bbc_vduvar(134)-TRACEWIDTH+1,j);
  printf("%s",tracestuff+i*(TRACEWIDTH+1));
  i++;
  j++;
  if(i==TRACELINES) i=0;
  } while(i!=tracepoint);
bbc_vdu(5);
bbc_vdu(24);
bbc_vduw(gx0);
bbc_vduw(gy0);
bbc_vduw(gx1);
bbc_vduw(gy1);
while(bbc_inkey(-1));
}

/*------------------------------------------------------------------------*/
void trace_flash(void)
{
int loop,x,y;

bbc_gcol(3,135);
for(loop=0;loop<6;loop++)
  {
  bbc_clg();
  os_byte(19,&x,&y);
  }
bbc_gcol(0,7);
}
/*------------------------------------------------------------------------*/
#else
/*------------------------------------------------------------------------*/
#define trace(x)
/*------------------------------------------------------------------------*/
#define trace_flash()
/*------------------------------------------------------------------------*/
#endif

/*---------------------------------------------------------------------*/
void trace_printf(char *szFormat, ...)
{
  va_list  Argv;
  int      Argc;
  char     szTrace[512];

  va_start(Argv, szFormat);
  Argc = vsprintf(szTrace, szFormat, Argv);
  trace(szTrace);
  va_end(Argv);
}

/*---------------------------------------------------------------------*/
#if TRACE==1
/*---------------------------------------------------------------------*/
void trace_box(wimp_box *wb)
{
  trace_printf("x0:%d x1:%d y0:%d y1:%d (%dx%d)",wb->x0,wb->x1,wb->y0,wb->y1,wb->x1-wb->x0,wb->y1-wb->y0);
}
/*---------------------------------------------------------------------*/
#else
/*---------------------------------------------------------------------*/
#define trace_box(a);
/*---------------------------------------------------------------------*/
#endif

/*------------------------------------------------------------------------*/
#if FLEXTRACE==1
/*------------------------------------------------------------------------*/
void *flextrace__calcptr(flex_ptr block,int offset)
{
if(!mflex_extend(block,mflex_size(block)+1)) trace("FLEXPTR !");
if(!mflex_extend(block,mflex_size(block)-1)) trace("FLEXPTR !!");
return((void*)((int)(*block)+offset));
}
/*------------------------------------------------------------------------*/
#define FLEXPTR(flexblock,offset)\
          flextrace__calcptr((flex_ptr)(flexblock),offset)
/*------------------------------------------------------------------------*/
#define FLEXCHECK(flexblock)  {int t=FLEXPTR(flexblock,0);}
/*------------------------------------------------------------------------*/
#else
/*------------------------------------------------------------------------*/
#define FLEXPTR(flexblock,offset) ((void*)((int)(*(flexblock))+(offset)))
/*------------------------------------------------------------------------*/
#define FLEXCHECK(flexblock)
/*------------------------------------------------------------------------*/
#endif



void Printf(char *szFormat, ...)
{
  va_list  Argv;
  int      Argc;
  char     szTrace[512];

  va_start(Argv, szFormat);
  szTrace[0]='#';
  Argc = vsprintf(szTrace+1, szFormat, Argv);
/*
  trace(szTrace);
*/
  va_end(Argv);
}

