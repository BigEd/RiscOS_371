
/*

:NOTES

  Drag manager library by Merlyn Kline, 1993

  * Call drag_end_drag() whenever there is an end drag event received
  * Call drag_start_drag() to start a drag
  * Call drag_use_unknown_events() if desired to register
    an unknown event handler which automatically deals with enddrags.
    If you do this, you don't need to call drag_enddrag() yourself.
  * Call drag_release_unknown_events() to stop automatically dealing
    with enddrags.

:END

  Revision History:

:HISTORY
    06/10/93  MK   First draught
    29/06/94 TCS   Added null event handler
:END

Entries in Messages file needed for this module are:

:MESSAGES
:END

*/

#include "stdlib.h"

/*------------------------------------------------------------------------*/
#include "os.h"
/*------------------------------------------------------------------------*/
#include "wimp.h"
#include "win.h"
#include "swis.h"

#include "Bone.h"

/*------------------------------------------------------------------------*/
typedef void (*drag_processor)(wimp_eventstr *e,void *handle);

/*------------------------------------------------------------------------*/
typedef void (*drag_null_processor)(void *handle);

/*------------------------------------------------------------------------*/
typedef void (*drag_cancel_processor)(void *handle);


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static drag_processor        drag__processor=NULL;
static void                  *drag__handle;
static drag_null_processor   drag__null_processor=NULL;
static drag_cancel_processor drag__cancel_processor=NULL;

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static void                  drag__nullevent(void *handle);

/*------------------------------------------------------------------------*/
void drag_end_drag(wimp_eventstr *e)
{
if(drag__null_processor)
  {
  drag__null_processor(drag__handle);
  drag__null_processor=NULL;
  }
idle_deregister_user(drag__nullevent,drag__handle);
if(drag__processor) drag__processor(e,drag__handle);
drag__cancel_processor=NULL;
drag__processor=NULL;
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static drag__unknown_event_processor(wimp_eventstr *e,void *handle)
{
if(drag__processor && e->e==wimp_EUSERDRAG)
  {
  drag_end_drag(e);
  return(TRUE);
  }
return(FALSE);
}

/*------------------------------------------------------------------------*/
void drag_use_unknown_events(void)
{
win_add_unknown_event_processor(drag__unknown_event_processor,NULL);
}

/*------------------------------------------------------------------------*/
void drag_release_unknown_events(void)
{
win_remove_unknown_event_processor(drag__unknown_event_processor,NULL);
}

/*------------------------------------------------------------------------*/
os_error *drag_start_drag(drag_processor proc,
                          drag_null_processor nullproc,
                          drag_cancel_processor cancelproc,
                          void *handle,wimp_dragstr *drag)
{
drag__processor=proc;
drag__null_processor=nullproc;
drag__cancel_processor=cancelproc;
idle_register_user(drag__nullevent,handle,FALSE);
drag__handle=handle;
return(wimp_drag_box(drag));
}

/*------------------------------------------------------------------------*/
os_error *drag_cancel_drag(void)
{
  _swix(DragASprite_Stop,0);
  _swix(Wimp_DragBox,_IN(1),-1);
  drag__processor=NULL;
  if (drag__cancel_processor)
  {
    drag__cancel_processor(drag__handle);
    drag__cancel_processor=NULL;
  }
  idle_deregister_user(drag__nullevent,drag__handle);
  drag__null_processor=NULL;
  return(NULL);
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static void drag__nullevent(void *handle)
{
  wimp_mousestr m;

  wimp_get_point_info(&m);
  if (!m.bbits) drag_cancel_drag();
  else if (drag__null_processor) drag__null_processor(handle);
}


