
#include "win.h"
#include "errorgen.h"
#include "stddef.h"
#include "stdlib.h"
#include "event.h"
#include "trace.h"
/*-----------------------------------------------------------------------*/
#include "os.h"
/*-----------------------------------------------------------------------*/
#include "wimp.h"

static int idleusers=0;
static int lastcalled=-1;
/*-----------------------------------------------------------------------*/
typedef void (*idle_user)(void *handle);

typedef struct idle_register {
  void          *next;
  idle_user     proc;
  void          *handle;
  BOOL          robin;
  } idle_register;

static idle_register *list=NULL;

/*-----------------------------------------------------------------------*/
os_error *idle_register_user(idle_user proc,void *handle,BOOL robin)
{
  idle_register *reg,*lastreg;

  lastreg=reg=list;
  while (reg)
  {
    if (reg->proc==proc&&reg->handle==handle)
    {
      reg->robin=robin;
      return(NULL);
    }
    lastreg=reg;
    reg=reg->next;
  }
  reg=malloc(sizeof(idle_register));
  if (!reg) return(errorgen(2));
  if (list) lastreg->next=reg;
  else list=reg;
  reg->next=NULL;
  reg->proc=proc;
  reg->handle=handle;
  reg->robin=robin;
  if(!idleusers) event_setmask(event_getmask()&~wimp_EMNULL);
  idleusers++;
  return(NULL);
}

/*-----------------------------------------------------------------------*/
void idle_deregister_user(idle_user proc,void *handle)
{
  idle_register *reg,*lastreg;

  lastreg=NULL;
  reg=list;
  while (reg && (reg->proc!=proc || reg->handle!=handle))
  {
    lastreg=reg;
    reg=reg->next;
  }
  if (!reg) return;
  if (lastreg) lastreg->next=reg->next;
  else if (reg==list) list=reg->next;
  else list=NULL;
  free(reg);
  if(idleusers) idleusers--;
  if(!idleusers) event_setmask(event_getmask()|wimp_EMNULL);
}

/*-----------------------------------------------------------------------*/
void idle_deregister_handle(void *handle)
{ /* deregister all users of the handle */
  idle_register *reg;

  do
  {
    reg=list;
    while (reg && reg->handle!=handle) reg=reg->next;
    if(reg) idle_deregister_user(reg->proc,handle);
  } while(reg);
}

/*-----------------------------------------------------------------------*/
void idle_call_users(void)
{
  idle_register *reg,*temp_reg;
  int           count,temp,found;

  reg=list;
  if (!reg) return;
  found=temp=count=0;
  while (reg)
  {
    temp_reg=reg->next;
    if (reg->robin)
    {
      found=count;
      if (count>lastcalled)
      {
        temp=count;
        (reg->proc)(reg->handle);
        lastcalled=idleusers+1;
      }
    }
    else (reg->proc)(reg->handle);
    count++;
    reg=temp_reg;
  }
  lastcalled=temp;
  if (lastcalled>=found) lastcalled=-1;
}

