/*

  Merlyn Kline, 1995

:NOTES

Create (or find size of) a draw file looking like the browser window

:END

:MESSAGES
drawfile:DrawFile
:END

:HISTORY
:END

*/

#include "stdlib.h"
#include "stddef.h"
#include "stdio.h"
#include "string.h"

/*----------------------------------------------------------------------*/
#include "wimp.h"
#include "wimpt.h"
#include "sprite.h"
#include "drawftypes.h"
#include "msgs.h"
#include "resspr.h"
#include "bbc.h"

#include "Defs.h"
#include "Main.h"
/*----------------------------------------------------------------------*/
#include "Browser.h"
#include "Reformat.h"
#include "Fontmanage.h"
#include "Redraw.h"
#include "Save.h"
#include "DrawFile.h"
#include "Button.h"
#include "Fetch.h"
#include "Images.h"
#include "PlotSpr.h"
#include "Forms.h"

#include "struct.h"
#include "tags.h"

#include "imagetrans.h"

#define DRAWMARGIN 0
#define DSIZE_FRECT (sizeof(draw_pathstrhdr)+5*12+4)
#define PTD(x) (((x)*16)/25) /* convert points to draw units */
#define OTD(x) ((x)*256) /* convert OS units to draw units */

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static BOOL drawfile_rectangle_fill(int x,int y,int w,int h,int c)
{ /* do a filled rectangle to the file. return success flag */
  char            d[DSIZE_FRECT];
  draw_pathstrhdr *ph;
  int             *i;

  ph=(draw_pathstrhdr*)d;
  ph->tag=draw_OBJPATH;
  ph->size=DSIZE_FRECT;
  ph->bbox.x0=x;
  ph->bbox.x1=x+w;
  ph->bbox.y0=y;
  ph->bbox.y1=y+h;
  ph->fillcolour=c;
  ph->pathcolour=-1;
  ph->pathwidth=0;
  ph->pathstyle.joincapwind=0;
  ph->pathstyle.reserved8=0;
  ph->pathstyle.tricapwid=0;
  ph->pathstyle.tricaphei=0;
  i=(int*)(d+sizeof(draw_pathstrhdr));
  *i++=draw_PathMOVE;
  *i++=x;
  *i++=y;
  *i++=draw_PathLINE;
  *i++=x;
  *i++=y+h-1;
  *i++=draw_PathLINE;
  *i++=x+w-1;
  *i++=y+h-1;
  *i++=draw_PathLINE;
  *i++=x+w-1;
  *i++=y;
  *i++=draw_PathLINE;
  *i++=x;
  *i++=y;
  *i++=draw_PathTERM;
  return(save_write_bytes(d,sizeof(d)));
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static void drawfile_font_info(HStream *t,int *number,int *size)
{
  int f,i,b;

  redraw_token_font_info(t,&f,size,&i,&b);
  *number=(f*4+(i?1:0)+(b?2:0)+1);
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int drawfile_input_field(wimp_box *box,int colour,int *size)
{
  int w,h;

  if(!size)
  {
    w=box->x1-box->x0-1;
    h=box->y1-box->y0-1;
    if(!drawfile_rectangle_fill(box->x0,box->y0,w,h,0xffffff00)) return(0);
    if(!drawfile_rectangle_fill(box->x0,box->y0,OTD(4)-1,h,colour)) return(0);
    if(!drawfile_rectangle_fill(box->x1-OTD(4),box->y0,OTD(4)-1,h,colour)) return(0);
    if(!drawfile_rectangle_fill(box->x0+OTD(4),box->y0,w-OTD(8),OTD(4)-1,colour)) return(0);
    if(!drawfile_rectangle_fill(box->x0+OTD(4),box->y1-OTD(4),w-OTD(8),OTD(4)-1,colour)) return(0);
 }
  return(5*DSIZE_FRECT);
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int drawfile_button(wimp_box *box,int *size)
{
  int w,h;

  if(!size)
  {
    w=box->x1-box->x0-1;
    h=box->y1-box->y0-1;
    if(!drawfile_rectangle_fill(box->x0,box->y0,w,h,0xdddddd00)) return(0);
    if(!drawfile_rectangle_fill(box->x0,box->y0,OTD(2)-1,h,0xffffff00)) return(0);
    if(!drawfile_rectangle_fill(box->x0+OTD(2),box->y0+OTD(2),OTD(2)-1,h-OTD(2),0xffffff00)) return(0);
    if(!drawfile_rectangle_fill(box->x0+OTD(4),box->y1-OTD(2),w-OTD(4),OTD(2)-1,0xffffff00)) return(0);
    if(!drawfile_rectangle_fill(box->x0+OTD(4),box->y1-OTD(4),w-OTD(6),OTD(2)-1,0xffffff00)) return(0);
    if(!drawfile_rectangle_fill(box->x0+OTD(2),box->y0,w-OTD(2),OTD(2)-1,0x77777700)) return(0);
    if(!drawfile_rectangle_fill(box->x0+OTD(4),box->y0+OTD(2),w-OTD(4),OTD(2)-1,0x77777700)) return(0);
    if(!drawfile_rectangle_fill(box->x1-OTD(4),box->y0+OTD(4),OTD(2)-1,h-OTD(8),0x77777700)) return(0);
    if(!drawfile_rectangle_fill(box->x1-OTD(2),box->y0+OTD(4),OTD(2)-1,h-OTD(6),0x77777700)) return(0);
  }
  return(9*DSIZE_FRECT);
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int drawfile_switch(int x,int y,char *spr,int *size)
{
  sprite_id       sid;
  draw_spristrhdr h;
  sprite_info     info;
  int             tsize;

  h.tag=draw_OBJSPRITE;
  sid.tag=sprite_id_name;
  sid.s.name=spr;
  plotspr_locate_sprite(resspr_area(),&sid);
  h.size=WORDALIGN(((sprite_header*)sid.s.addr)->next)+sizeof(draw_spristrhdr);
  h.bbox.x0=x;
  h.bbox.y0=y-OTD(8);
  tsize=h.size;
  if(!size)
  {
    sprite_readsize(resspr_area(),&sid,&info);
    h.bbox.x1=h.bbox.x0+OTD(info.width<<bbc_modevar(info.mode,bbc_XEigFactor));
    h.bbox.y1=h.bbox.y0+OTD(info.height<<bbc_modevar(info.mode,bbc_YEigFactor));
    if(!save_write_bytes((char*)&h,sizeof(h))) return(0);
    if(!save_write_bytes((char*)sid.s.addr,WORDALIGN(((sprite_header*)sid.s.addr)->next))) return(0);
  }
  return(tsize);
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static BOOL drawfile_texthdr(browser *b,int t,HStream *tp,int x,int y,int w,int h,int base,int length,int bgnd)
{
  draw_textstrhdr hdr;
  int             number,size;

  drawfile_font_info(tp,&number,&size);
  hdr.tag=draw_OBJTEXT;
  hdr.size=sizeof(draw_textstrhdr)+WORDALIGN(length+1);
  hdr.bbox.x0=x;
  hdr.bbox.x1=x+w-1;
  hdr.bbox.y0=y;
  hdr.bbox.y1=y+h-1;
  hdr.textcolour=redraw_token_colour(b,tp,t);
  hdr.background=bgnd;
  hdr.textstyle.fontref=fm_system_font()?0:number;
  hdr.textstyle.reserved8=0;
  hdr.textstyle.reserved16=0;
  hdr.fsizex=hdr.fsizey=size*40;
  if(fm_system_font()) hdr.fsizex/=2;
  hdr.coord.x=x;
  hdr.coord.y=y+base;
  if(!save_write_bytes((char*)&hdr,sizeof(hdr))) return(FALSE);
  return(TRUE);
}

/*----------------------------------------------------------------------*/
BOOL drawfile_create(browser *b,int *size)
{ /* create a draw file from the browser window. If size!=NULL then just
     find the size of the file and write it to the given address, otherwise
     use save_write_bytes() to write the drawfile and return success flag */
  reformat_line  *lp;
  int            l,tsize;

  tsize=40; /* draw file header */
  tsize+=DSIZE_FRECT; /* background */
  if(size)
    *size=0;
  else
  {
    draw_fileheader h;

    strcpy(h.title,"Draw");
    h.majorstamp=201;
    h.minorstamp=0;
    strcpy(h.progident,progname+1);
    while(strlen(h.progident)<12) strcat(h.progident," ");
    h.bbox.x0=DRAWMARGIN;
    h.bbox.x1=DRAWMARGIN+OTD(b->display_width);
    h.bbox.y0=DRAWMARGIN;
    h.bbox.y1=DRAWMARGIN+OTD(-b->reformat_extent);
    if(!save_write_bytes((char*)&h,sizeof(h))) return(FALSE);
  }
  if(!fm_system_font())
  {
    int  f,i,b,n;
    char fontname[68];
    int  fsize;

    fsize=8;
    for(f=0;f<12;f++) /* 12 faces */
    {
      n=f/4; /* internal font number */
      i=(f%4)&1; /* italic flag, lsb (bit 0) */
      b=(f%4)>>1; /* bold flag, bit 1 */
      fm_write_name(redraw_faces[n],fontname,i,b);
      fsize+=strlen(fontname)+2;
    }
    tsize+=WORDALIGN(fsize);
    if(!size)
    {
      *(int*)fontname=draw_OBJFONTLIST;
      *(int*)(fontname+4)=WORDALIGN(fsize);
      save_write_bytes(fontname,8);
      for(f=0;f<12;f++) /* 12 faces */
      {
        n=f/4; /* internal font number */
        i=(f%4)&1; /* italic flag, lsb (bit 0) */
        b=(f%4)>>1; /* bold flag, bit 1 */
        fm_write_name(redraw_faces[n],fontname+1,i,b);
        fontname[0]=f+1;
        save_write_bytes(fontname,strlen(fontname+1)+2);
      }
      if(fsize!=WORDALIGN(fsize))
        save_write_bytes(fontname,WORDALIGN(fsize)-fsize);
    }
  }
  if(!size && !drawfile_rectangle_fill(DRAWMARGIN,DRAWMARGIN,
                     OTD(b->display_width+1)-1,
                     OTD(-b->reformat_extent-BUTTONBAR_HEIGHT-URLBAR_HEIGHT+1)-1,
                     redraw_backcol(b))) return(FALSE);
  if(!b->plainback && b->backimage && image_fetched(b,b->backimage))
  {
    int             wd,ht,nx,ny,x,y,ssize;
    wimp_box        box;

    image_get_back_image_size(b,&box);
    wd=box.x1-box.x0;
    ht=box.y1-box.y0;
    if(wd<1 || ht<1) return(FALSE);
    nx=b->display_width/wd+1;
    ny=(-b->reformat_extent-BUTTONBAR_HEIGHT-URLBAR_HEIGHT)/ht+1;
    if(size)
    {
      if(wimpt_complain(image_saveback_start_save(b,&ssize))) return(FALSE);
      tsize+=(ssize+sizeof(draw_spristrhdr))*nx*ny;
      image_saveback_end_save(b);
    }
    else
    {
      draw_spristrhdr h;
      BOOL            ok;

      ok=TRUE;
      for(y=DRAWMARGIN+OTD(-b->reformat_extent-BUTTONBAR_HEIGHT-URLBAR_HEIGHT+1);y>=DRAWMARGIN;y-=OTD(ht))
      {
        for(x=DRAWMARGIN;x<=DRAWMARGIN+OTD(b->display_width+1);x+=OTD(wd))
        {
          if(wimpt_complain(image_saveback_start_save(b,&ssize))) return(FALSE);
          h.tag=draw_OBJSPRITE;
          h.size=ssize+sizeof(draw_spristrhdr);
          h.bbox.x0=x;
          h.bbox.x1=x+OTD(wd);
          h.bbox.y0=y-OTD(ht);
          h.bbox.y1=y;
          ok=save_write_bytes((char*)&h,sizeof(h));
          if(ok) ok=image_saveback_save_image(b);
          image_saveback_end_save(b);
          if(!ok) return(FALSE);
        }
      }
    }
  }
  lp=reformat_line_address(b,1);
  for(l=1;l<=b->nlines;l++)
  {
    HStream             *tp;
    int                 x,y,base,t,i;
    char                *dp;
    reformat_line_chunk *cp;

    t=0;
    cp=reformat_line_chunk_address(lp,0);
    tp=fetch_token_address(b,cp->t);
    y=DRAWMARGIN+OTD(lp->y-b->reformat_extent-1);
    x=DRAWMARGIN+OTD(redraw_start_x(b,tp,lp,cp));
    base=OTD(lp->b);
    for(i=0;i<lp->n;x+=PTD(cp->w),i++,cp++)
    {
      tp=fetch_token_address(b,cp->t);
      if(tp->style&IMG)
      {
        wimp_box    box;

        if(!reformat_get_image_size(b,cp->t,tp,&box))
        {
          int  ssize;
          BOOL ok;

          if(wimpt_complain(image_savesprite_start_save(b,cp->t,&ssize))) return(FALSE);
          tsize+=ssize+sizeof(draw_spristrhdr);
          if(ISLINK(tp) && tp->maxlen) tsize+=DSIZE_FRECT*4;
          ok=TRUE;
          if(!size)
          {
            draw_spristrhdr h;

            h.tag=draw_OBJSPRITE;
            h.size=ssize+sizeof(draw_spristrhdr);
            h.bbox.x0=x;
            h.bbox.x1=x+OTD(box.x1-box.x0-1)+1;
            h.bbox.y0=y+base+OTD(box.y0);
            h.bbox.y1=y+base+OTD(box.y1-1)+1;
            if(ISLINK(tp))
            {
              int o;

              o=OTD(tp->maxlen*2);
              if(o)
              {
                if(!drawfile_rectangle_fill(h.bbox.x0,h.bbox.y0,h.bbox.x1-h.bbox.x0-1,o-1,
                                            redraw_token_colour(b,tp,cp->t))) return(FALSE);
                if(!drawfile_rectangle_fill(h.bbox.x0,h.bbox.y0,o-1,h.bbox.y1-h.bbox.y0-1,
                                            redraw_token_colour(b,tp,cp->t))) return(FALSE);
                if(!drawfile_rectangle_fill(h.bbox.x0,h.bbox.y1-o,h.bbox.x1-h.bbox.x0-1,o-1,
                                            redraw_token_colour(b,tp,cp->t))) return(FALSE);
                if(!drawfile_rectangle_fill(h.bbox.x1-o,h.bbox.y0,o-1,h.bbox.y1-h.bbox.y0-1,
                                            redraw_token_colour(b,tp,cp->t))) return(FALSE);
                h.bbox.x0+=o;
                h.bbox.x1-=o;
                h.bbox.y0+=o;
                h.bbox.y1-=o;
              }
            }
            h.bbox.x1+=OTD(1); h.bbox.y1+=OTD(1);
            ok=save_write_bytes((char*)&h,sizeof(h));
            if(ok) ok=image_savesprite_save_image(b,cp->t);
          }
          image_savesprite_end_save(b,cp->t);
          if(!ok) return(FALSE);
        }
      }
      else if(tp->style&HR)
      {
        tsize+=2*DSIZE_FRECT; /* two rectangles */
        if(!size)
        {
          int         x,w,dy,h;

          x=96;
          w=OTD(b->display_width-x*2-1);
          x=OTD(x)+DRAWMARGIN;
          h=OTD(3+1)-1;
          dy=y+OTD(lp->h)/2+1;
          if(!drawfile_rectangle_fill(x,dy,w,h,0x77777700)) return(FALSE);
          if(!drawfile_rectangle_fill(x,dy-OTD(4),w,h,0xffffff00)) return(FALSE);
        }
      }
      else if(tp->style&(INPUT|TEXTAREA|SELECT))
      {
        if((tp->type&TYPE_RESET)==TYPE_TEXT || (tp->type&TYPE_RESET)==TYPE_PASSWORD ||
           (tp->style & (TEXTAREA|SELECT)))
          {
            wimp_box box,fontbox;
            int      fh;
            int      s;
            BOOL     multiline=FALSE;

            fh=redraw_find_token_font(tp);
            fm_font_box(fh,&fontbox);
            box=fontbox;
            if(tp->style&TEXTAREA)
            {
              int r;

              r=tp->rows;
              if(r<3) r=3;
              box.y1=(box.y1-box.y0+4)*r+box.y0;
              multiline=TRUE;
            }
            box.y0=OTD(box.y0-8)+y+base;
            box.y1=OTD(box.y1+8)+y+base;
            box.x0=x+OTD(4);
            box.x1=x+PTD(cp->w)-OTD(4); /* border */
            s=drawfile_input_field(&box,redraw_token_colour(b,tp,cp->t),size);
            {
              char     c,*p,*t;
              int      l,w,y;
              char     text[1024];
              int      lh,lb;
              wimp_box area;

              area=box; area.x0+=OTD(8); area.x1-=OTD(8); area.y0+=OTD(8); area.y1-=OTD(8);
              p=form_get_field_text(b,cp->t);
              form_get_linesize(&fontbox,&lh,&lb); lh=OTD(lh); lb=OTD(lb);
              if(p)
              {
                strncpy(text,p,sizeof(text)-1);
                text[sizeof(text)-1]=0;
                if((tp->type&TYPE_RESET)==TYPE_PASSWORD) {p=text; while(*p) *p++='*';}
                p=text;
                y=area.y1;
                do
                {
                  t=strchr(p,'\n'); if(!t) t=strchr(p,0); c=*t; *t=0;
                  fm_get_string_width(fh,p,cp->w-28*400,strlen(p),-1,&l,&w);
                  s+=sizeof(draw_textstrhdr)+WORDALIGN(l+1);
                  if(!size)
                  {
                    char c,*t;

                    t=p+l; c=*t; *t=0;
                    if(!drawfile_texthdr(b,cp->t,tp,x+12*400,y-lh,PTD(cp->w-28*400),lh,lb,l,0xffffff00))
                      return(FALSE);
                    if(!save_write_bytes(p,WORDALIGN(l+1))) return(FALSE);
                    *t=c;
                  }
                  y-=lh;
                  *t=c;
                  p=t; if(*p=='\n') p++;
                } while(y>area.y0 && multiline && *p);
              }
            }
            if(tp->style&SELECT)
            {
              sprite_id       sid;
              sprite_info     info;
              draw_spristrhdr h;

              sid.tag=sprite_id_name;
              sid.s.name="gright";
              plotspr_locate_sprite(resspr_area(),&sid);
              if(!sprite_readsize(resspr_area(),&sid,&info))
              {
                int w,v;

                w=info.width<<bbc_modevar(info.mode,bbc_XEigFactor);
                v=info.height<<bbc_modevar(info.mode,bbc_YEigFactor);
                s+=DSIZE_FRECT;
                if(!size && !drawfile_rectangle_fill(box.x1-OTD(w+8),box.y0+OTD(4),OTD(w+8)-1,OTD(v+4)-1,
                                                     redraw_token_colour(b,tp,cp->t))) return(FALSE);
                h.tag=draw_OBJSPRITE;
                h.size=WORDALIGN(((sprite_header*)sid.s.addr)->next)+sizeof(draw_spristrhdr);
                s+=h.size;
                if(!size)
                {
                  h.bbox.x0=box.x1-OTD(w+4);
                  h.bbox.y0=box.y0+OTD(4);
                  h.bbox.x1=h.bbox.x0+OTD(w);
                  h.bbox.y1=h.bbox.y0+OTD(info.height<<bbc_modevar(info.mode,bbc_YEigFactor));
                  if(!save_write_bytes((char*)&h,sizeof(h))) return(FALSE);
                  if(!save_write_bytes((char*)sid.s.addr,WORDALIGN(((sprite_header*)sid.s.addr)->next))) return(FALSE);
                }
              }
            }
            fm_lose_font(fh);
            if(!s) return(FALSE);
            tsize+=s;
          }
        switch(tp->type&TYPE_RESET)
        {
          case TYPE_CHECKBOX:
          {
            int s;

            s=drawfile_switch(x,y+base,form_get_field(b,cp->t)->checked?"opton":"optoff",size);
            if(!s) return(FALSE);
            tsize+=s;
          } break;
          case TYPE_RADIO:
          {
            int s;

            s=drawfile_switch(x,y+base,form_get_field(b,cp->t)->checked?"radioon":"radiooff",size);
            if(!s) return(FALSE);
            tsize+=s;
          } break;
          case TYPE_IMAGE: /* ;{{ */ break;
          case TYPE_HIDDEN: break;
          case TYPE_SUBMIT: /* SUBMIT same as RESET: no break */
          case TYPE_RESET:
          {
            int      s;
            wimp_box box;
            int      fh;
            char     text[1024];

            fh=redraw_find_token_font(tp);
            fm_font_box(fh,&box);
            box.y0=OTD(box.y0-8)+y+base;
            box.y1=OTD(box.y1+8)+y+base;
            box.x0=x+OTD(4);
            box.x1=x+PTD(cp->w)-OTD(4); /* border */
            s=drawfile_button(&box,size);
            if(!s) return(FALSE);
            STRFILL(text,form_button_text(tp));
            s+=sizeof(draw_textstrhdr)+WORDALIGN(strlen(text)+1);
            if(!size)
            {
              if(!drawfile_texthdr(b,cp->t,tp,x+OTD(12),y,PTD(cp->w-28*400),OTD(lp->h),base,strlen(text),0xdddddd00))
                return(FALSE);
              if(!save_write_bytes(text,WORDALIGN(strlen(text)+1))) return(FALSE);
            }
            tsize+=s;
          }
          break;
        }
      }
      else if(ISBULLET(tp))
      {
        char            spr[20];
        sprite_id       sid;
        draw_spristrhdr h;
        sprite_info     info;

        h.tag=draw_OBJSPRITE;
        sprintf(spr,"b%d",(tp->indent+bullets-1)%bullets);
        sid.tag=sprite_id_name;
        sid.s.name=spr;
        plotspr_locate_sprite(resspr_area(),&sid);
        h.size=WORDALIGN(((sprite_header*)sid.s.addr)->next)+sizeof(draw_spristrhdr);
        h.bbox.x0=x;
        h.bbox.y0=y+base;
        tsize+=h.size;
        if(!size)
        {
          sprite_readsize(resspr_area(),&sid,&info);
          h.bbox.x1=h.bbox.x0+OTD(info.width<<bbc_modevar(info.mode,bbc_XEigFactor));
          h.bbox.y1=h.bbox.y0+OTD(info.height<<bbc_modevar(info.mode,bbc_YEigFactor));
          if(!save_write_bytes((char*)&h,sizeof(h))) return(FALSE);
          if(!save_write_bytes((char*)sid.s.addr,WORDALIGN(((sprite_header*)sid.s.addr)->next))) return(FALSE);
        }
      }
      else
      {
        int  length;
        char text[1024];

        length=cp->l;
        if(length>sizeof(text)-5) length=sizeof(text)-5;
        dp=fetch_token_data_address(b,cp->t);
        while(dp && length && dp[cp->o+length-1]=='\n') length--;
        if(length && cp->w>0 && dp)
        {
          tsize+=sizeof(draw_textstrhdr)+WORDALIGN(length+1);
          if(ISLINK(tp)) tsize+=DSIZE_FRECT;
          if(!size)
          {
            memset(text,0,sizeof(text));
            if(!drawfile_texthdr(b,cp->t,tp,x,y,PTD(cp->w),OTD(lp->h),base,length,
                                 redraw_background_colour(b,redraw_token_colour(b,tp,cp->t))))
              return(FALSE);
            strncpy(text,dp+cp->o,length);
            if(!save_write_bytes(text,WORDALIGN(length+1))) return(FALSE);
            if(ISLINK(tp))
              if(!drawfile_rectangle_fill(x,y+base-OTD(6),PTD(cp->w),OTD(2),
                                          redraw_token_colour(b,tp,cp->t)))
                return(FALSE);
          }
        }
      }
    }
    lp=reformat_next_line_address(lp);
  }
  if(size) *size=tsize;
  return(TRUE);
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static int drawfile_size(browser *b)
{
  int           size;

  size=0;
  drawfile_create(b,&size);
  return(size);
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static BOOL drawfile_saver(void *handle,char *pathname)
{
  browser       *b;

  pathname=pathname;
  b=(browser*)handle;
  return(drawfile_create(b,NULL));
}

/*----------------------------------------------------------------------*/
os_error *drawfile_save(browser *b)
{
  char pathname[256];

  strcpy(pathname,msgs_lookup("drawfile:DrawFile"));
  button_set_flags(b,B_SAVEDRAW,TRUE,FALSE);
  save_saveas(FILETYPE_DRAW,pathname,drawfile_size(b),drawfile_saver,NULL,(void*)b);
  button_set_flags(b,B_SAVEDRAW,FALSE,FALSE);
  return(NULL);
}
