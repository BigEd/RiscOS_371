
/*

  Button bar related stuff for Browser

:HISTORY
:END

:MESSAGES
HwURL:This is the URL bar which shows the URL of the current page.|MYou may display another page by entering its URL in the display field.
HwURL2:This field displays the URL of the current page.|MEnter a new URL in this field to display a different page.
HwURL1:Click SELECT to choose a page to display from the page history list.
HwBUT:This is the button bar. Click SELECT on the buttons for quick access to commonly used functions.
HwBUT0:Click SELECT to display the home page
HwBUT7:Click SELECT to return to the previously displayed page from the history list.
HwBUT3:Click SELECT to re-load this page.
HwBUT6:Click SELECT to interrupt the current fetch.
HwBUT1:Click SELECT to move forward through the history list.
HwBUT8:Click SELECT to add the displayed page to your hot-list.
HwBUT5:Click SELECT to display your hot-list and choose a page from it.
HwBUT4:Click SELECT to display the resources list and choose a page from it.
HwBUT9:Click SELECT to display the images associated with this page.
HwBUT2:Click SELECT to export the displayed page as a Draw file.
:END

*/

#include "string.h"

#include "akbd.h"
/*------------------------------------------------------------------------*/
#include "os.h"
#include "event.h"
#include "wimpt.h"
#include "win.h" /* fixes problem caused by incorrect header for iconbar.c since Acorn had a go at it */

/*------------------------------------------------------------------------*/
#include "ErrorGen.h"
/*------------------------------------------------------------------------*/
#include "Browser.h"
#include "IconBar.h"
#include "Hotlist.h"
/*------------------------------------------------------------------------*/
#include "Defs.h"
#include "Fetch.h"
#include "Reformat.h"
#include "DrawFile.h"
#include "Button.h"

os_error *button_press_handler(int button,wimp_eventstr *ev,void *handle);

#if 0
/*------------------------------------------------------------------------*/
typedef enum {  /* button handles */
  B_PRINT,      /* Print document */
  B_FWD,        /* move to next page */
  B_BACK,       /* move to previous page */
  B_INFO,       /* information on selection */
  B_OPENURL,
  B_OPENFILE,
  B_HOMEPAGE,
  B_RELOAD,
  B_HOTLIST,
  B_ADDHOT,
  B_SUBHOT,
  B_RESOURCE,
  B_SAVEHTML,
  B_SAVETEXT,
  B_SAVEDRAW,
  B_FIND,
  B_STOP,
  B_SAVEHOT,
  B_IMAGES,
  B_LAST_BUTTON,
  B_TERM=-1     /* MUST LEAVE THIS AT THE END OF THE ENUM */
  } button_handle;

/*------------------------------------------------------------------------*/
#define BPROC button_press_handler
#endif

/*------------------------------------------------------------------------*/
BOOL button_grey(browser *b,int button)
{
  switch(button)
  {
    case B_BACK: return(b->hnum<1 || b->hpos==1); break;
    case B_FWD: return(b->hnum<2 || b->hpos<1); break;
    case B_STOP: return(!fetch_fetching(b)); break;
    case B_HOTLIST: return(hotlist_size[0]==0); break;
    case B_RESOURCE: return(hotlist_size[1]==0); break;
    case B_SAVEHTML: return(fetch_fetching(b) || !b->source); break;
    case B_SUBHOT: return(hotlist_size[0]==0); break;
    case B_SAVETEXT: return(fetch_fetching(b)); break;
    case B_SAVEDRAW: return(fetch_fetching(b) || reformat_formatting(b)); break;
    case B_SAVEHOT: return(hotlist_size[0]==0); break;
    case B_IMAGES: return(image_count_delayed(b)==0); break;
  }
  return(FALSE);
}

/*------------------------------------------------------------------------*/
BOOL button_selected(browser *b,int button)
{
  b=b;
  switch(button)
  {
  }
  return(FALSE);
}

/*------------------------------------------------------------------------*/
os_error *button_press(int button,browser *b)
{
  os_error *e=0;

  switch(button)
  {
    case B_OPENURL:    e=browser_open_location(b,FALSE); break;
    case B_OPENFILE:   e=browser_open_location(b,TRUE); break;
    case B_HOMEPAGE:   e=browser_show_url_f(b,user.homepage,TRUE); break;
    case B_ADDHOT:     e=hotlist_add_page(b,0); break;
    case B_HOTLIST:    e=hotlist_display(b,FALSE,0); break;
    case B_SUBHOT:     e=hotlist_display(b,TRUE,0); break;
    case B_SAVEHOT:    e=hotlist_save(b,0); break;
    case B_RESOURCE:   e=hotlist_display(b,FALSE,1); break;
    case B_BACK:       e=browser_back_f(b); break;
    case B_FWD:        e=browser_forward_f(b); break;
    case B_STOP:       e=browser_stop_f(b,FALSE); break;
    case B_FIND:       e=browser_find(b); break;
    case B_PRINT:      e=browser_print(b); break;
    case B_INFO:       break;
    case B_SAVETEXT:   e=fetch_save_text(b); break;
    case B_SAVEHTML:   e=fetch_save_html(b); break;
    case B_SAVEDRAW:   e=drawfile_save(b); break;
    case B_IMAGES:     image_restart_fetches(b); break;
    case B_RELOAD:     e=browser_reload(b); break;
  }
  return(e);
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static int button_icons[]=
{
  B_HOMEPAGE,   0,
  B_BACK,       7,
  B_RELOAD,     3,
  B_STOP,       6,
  B_FWD,        1,
  B_HOTLIST,    5,
  B_RESOURCE,   4,
  B_SAVEDRAW,   2,
  B_ADDHOT,     8,
  B_IMAGES,     9
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static int icon_from_button(button_handle button)
{
  int i;

  for(i=0;i<sizeof(button_icons)/sizeof(int);i+=2)
    if(button_icons[i]==button) return(button_icons[i+1]);
  return(-1);
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
button_handle button_from_icon(int icon)
{
  int i;

  for(i=0;i<sizeof(button_icons)/sizeof(int);i+=2)
    if(button_icons[i+1]==icon) return(button_icons[i]);
  return(-1);
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
os_error *button_icon_set_flags(browser *b,int i,BOOL on,BOOL grey)
{
  wimp_icon ic;
  BOOL      co,cg;

  if(i<0) return(NULL);
  wimp_get_icon_info(b->buttonbar.w,i,&ic);
  co=(ic.flags&wimp_ISELECTED)!=0;
  cg=(ic.flags&wimp_INOSELECT)!=0;
  on=on!=0;
  grey=grey!=0;
  if(co!=on || cg!=grey)
    wimp_set_icon_state(b->buttonbar.w,i,
                        (grey?wimp_INOSELECT:0)|(on?wimp_ISELECTED:0),
                        wimp_INOSELECT|wimp_ISELECTED);
  return(0);
}

/*------------------------------------------------------------------------*/
os_error *button_set_flags(browser *b,int button,BOOL on,BOOL grey)
{
  int       i;

  i=icon_from_button(button);
  if(i<0) return(NULL);
  return(button_icon_set_flags(b,i,on,grey));
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static os_error *button_set_state(browser *b,int button)
{
  int       i;

  i=icon_from_button(button);
  if(i<0) return(NULL);
  return(button_icon_set_flags(b,i,button_selected(b,button),button_grey(b,button)));
}

/*------------------------------------------------------------------------*/
os_error *button_set_states(browser *b)
{
  button_handle i;

  for(i=0;i<B_LAST_BUTTON;i++) button_set_state(b,i);
  return(0);
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
void button_button_event(browser *b,int i,int bbits)
{
  button_handle button;

  browser_give_focus_general(b);
  if(bbits==wimp_BLEFT)
  {
    button=button_from_icon(i);
    if(button>=0) wimpt_complain(button_press(button,b));
  }
}

/*----------------------------------------------------------------------*/
void button_event(wimp_eventstr *e,void *handle)
{
  browser *b;

  b=(browser*)handle;
  switch(e->e)
  {
    case wimp_EOPEN:   wimp_open_wind(&(e->data.o)); break;
    case wimp_ECLOSE:  break;
    case wimp_EBUT:    button_button_event(b,e->data.but.m.i,e->data.but.m.bbits); break;
    case wimp_ESENDWANTACK:
    {
      if(e->data.msg.hdr.action==wimp_MHELPREQUEST)
      {
        char tag[2];
        int  i=e->data.msg.data.helprequest.m.i;

        tag[0]=tag[1]=0;
        if(i>=0) tag[0]=i+1;
        help_genmessage("HwBUT",tag);
      }
    }
    break;
    default:           browser_window_event(e,handle);
  }
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static void button_url_button_event(browser *b,int i)
{
  if(i==1) wimpt_complain(history_display(b));
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
static void button_url_key_event(browser *b,int key)
{
  if(key==13)
  {
    char      url[512],*p;
    wimp_icon ic;

    wimp_get_icon_info(b->urlbar.w,2,&ic);
    STRFILL(url,ic.data.indirecttext.buffer);
    p=strchr(url,'\r');
    if(p) *p=0;
    browser_fix_url(url,sizeof(url));
    wimpt_complain(browser_show_url_f(b,url,TRUE));
  }
  else
    wimpt_complain(browser_process_key(b,key));
}

/*----------------------------------------------------------------------*/
void button_urlbar_event(wimp_eventstr *e,void *handle)
{
  browser *b;

  b=(browser*)handle;
  switch(e->e)
  {
    case wimp_EOPEN:   wimp_open_wind(&(e->data.o)); break;
    case wimp_ECLOSE:  break;
    case wimp_EBUT:    button_url_button_event(b,e->data.but.m.i); break;
    case wimp_EKEY:    button_url_key_event(b,e->data.key.chcode); break;
    case wimp_ESEND:
    case wimp_ESENDWANTACK:
    {
      if(e->data.msg.hdr.action==wimp_MHELPREQUEST)
      {
        char tag[2];
        int  i=e->data.msg.data.helprequest.m.i;

        tag[0]=tag[1]=0;
        if(i==1 || i==2) tag[0]=i+1;
        help_genmessage("HwURL",tag);
      }
    }
    break;
    default:           browser_window_event(e,handle);
  }
}

