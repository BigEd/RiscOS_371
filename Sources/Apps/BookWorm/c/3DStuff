#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <stdlib.h>

#include "os.h"
/*------------------------------------------------------------------------*/
#include "wimp.h"
#include "wimpt.h"
#include "win.h"
#include "template.h"
#include "menu.h"
#include "event.h"
#include "font.h"
#include "bbc.h"
/*------------------------------------------------------------------------*/
#include "coords.h"
#include "sprite.h"
#include "resspr.h"
#include "colourtran.h"
#include "browser.h"

#include "Graphics.h"

#include "Printing.h"

#define MAJORMARKSIZE 27   /* height of major marking */
#define MINORMARKSIZE 15   /* height of minor marking */

#define LEFTSPREAD 4       /* Max OS units drawn to left of marker */
#define RIGHTSPREAD 56     /* Max OS units drawn to right of marker */
#define SCALEHEIGHT (32+MINORMARKSIZE) /* overall height of scale */

#define SCALEWIDTH (48+MINORMARKSIZE)
#define UPSPREAD 32
#define DOWNSPREAD 4

#define MAXBUTTONS 256 /* most 3d buttons allowed in one window */

static BOOL d3__pretty=TRUE;

/*------------------------------------------------------------------------*/
BOOL d3_read_3d_mode(void)
{
/* returns whether 3d mode is enabled */
return(d3__pretty);
}

/*------------------------------------------------------------------------*/
BOOL d3_set_3d_mode(BOOL allow3d)
{
/* sets 3d mode enabled flag, returns previous state */
BOOL oldmode;

oldmode=d3__pretty;
d3__pretty=allow3d;
return(oldmode);
}

/*------------------------------------------------------------------------*/
int d3_shadow_colour(void)
{
return(wimpt_bpp()==1?7:4);
}

/*------------------------------------------------------------------------*/
int d3_highlight_colour(void)
{
return(wimpt_bpp()<4?0:1);
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
void d3__outline(wimp_box *box,wimp_box *g,BOOL raised)
{
/*
    Draw a 3D raised plinth around the given box, clipped to the
    given graphics window. clips the edges to just outside the window if
    they are outside at all thus avoiding potential problems with plotting
    rectangles having sides >32768 units (OS overflow point). Uses the
    results of the tests used to do this to decide whether to plot each edge.
    NB: Box to plinth should have bottom left inclusive, top right exclusive
        (ie plinth covers x0,y0 to x1-1,y1-1)
*/
int x,y,w,h,flags,highlight,shadow;

highlight=raised?d3_highlight_colour():d3_shadow_colour();
shadow=raised?d3_shadow_colour():d3_highlight_colour();
flags=15; /* all sides need drawing */
x=box->x0; if(x<g->x0-8) {x=g->x0-8; flags^=1;}          /* don't do left */
y=box->y0; if(y<g->y0-8) {y=g->y0-8; flags^=2;}          /* don't do bott */
x&=graphics_xmask();
y&=graphics_ymask();
w=(box->x1&=graphics_xmask())-x-1; if(w>g->x1-x+7) {w=g->x1-x+7; flags^=4;}; /* don't do right */
h=(box->y1&=graphics_ymask())-y-1; if(h>g->y1-y+7) {h=g->y1-y+7; flags^=8;}; /* don't do top */
if(d3__pretty)
  {
  if(flags&(8|1)) wimp_setcolour(highlight);
  if(flags&1) bbc_rectanglefill(x,y,3,h);
  if(flags&8) bbc_rectanglefill(x+4,y+h-3,w-4,3);
  if(flags&(2|4)) wimp_setcolour(shadow);
  if(flags&2)
    {
    bbc_rectanglefill(x+4,y,w-4,3);
    bbc_rectanglefill(x+2,y,1,1);
    }
  if(flags&4)
    {
    bbc_rectanglefill(x+w-3,y+4,3,h-4-Wimpt_dy);
    bbc_rectanglefill(x+w-1,y+h-3,1,3);
    }
  }
else
  {
  wimp_setcolour(shadow);
  bbc_rectangle(x,y,w,h);
  }
}

/*------------------------------------------------------------------------*/
void d3_outline_plinth(wimp_box *box,wimp_box *g)
{
/*
    Draw a 3D raised plinth around the given box, clipped to the
    given graphics window. clips the edges to just outside the window if
    they are outside at all thus avoiding potential problems with plotting
    rectangles having sides >32768 units (OS overflow point). Uses the
    results of the tests used to do this to decide whether to plot each edge.
    NB: Box to plinth should have bottom left inclusive, top right exclusive
        (ie plinth covers x0,y0 to x1-1,y1-1)
*/
d3__outline(box,g,TRUE);
}

/*------------------------------------------------------------------------*/
void d3_outline_hole(wimp_box *box,wimp_box *g)
{
/*
    Draw a 3D dropped hole border around the given box, clipped to the
    given graphics window. clips the edges to just outside the window if
    they are outside at all thus avoiding potential problems with plotting
    rectangles having sides >32768 units (OS overflow point). Uses the
    results of the tests used to do this to decide whether to plot each edge.
    NB: Box to plinth should have bottom left inclusive, top right exclusive
        (ie plinth covers x0,y0 to x1-1,y1-1)
*/
d3__outline(box,g,FALSE);
}

/*------------------------------------------------------------------------*/
void d3_button(wimp_box *box,wimp_iconflags flags,char *s)
{
/*
    Draws a 3D button for an icon. The icon must have the 'needs help to
    redraw' flag set and must be indirected with a validation string
    starting with a '$' sign. The string may contain text or a sprite name.
    a comma in the text/sprite name separates a second piece of text/sprite
    name, used if the button is selected. Sprite names should start with an
    '@' symbol. Note that a combination of text and sprite (depending on
    whether the icon is selected) is possible. A semicolon may be used to
    terminate the entry so further commands may be placed in the string.

    The horizontal/vertical centering flags and right justify are observed.
    The foreground colour of the icon will be used for any text. The
    background colour is used to fill the icon before placing the text/sprite.
    It is recommended that non-rectangular sprites should have masks to
    avoid any difficulties in modes with <4bpp.

    Validation string may also contain the sequence ;cxxxxxxxx where the xxx
    is a hex number in the form BBGGRR00 for the rgb colour of the icon. This
    string may, of course, be changed at run time.

    Note that the box is a window type with the bottom left inclusive and the
    top right exclusive.
*/

int              x,y,x1,y1,w,h,fg,bg,text;
char             *sep,*end;
BOOL             fullcolour=FALSE;
wimp_paletteword colour;

x=box->x0&graphics_xmask();          /* fix box */
y=box->y0&graphics_ymask();
w=(box->x1&graphics_xmask())-x-1;
h=(box->y1&graphics_ymask())-y-1;
sep=s;
end=s;
while(*end>31 && *end!=';') end++;   /* find end of string */
if(*end==';' && *(end+1)=='c')       /* check for full colour */
  {
  fullcolour=TRUE;
  sscanf(end+2,"%x",&colour.word);
  colour.bytes.gcol=0;
  }
if(*end==';') *end=0; else end=NULL;
while(*sep>31 && *sep!=',') sep++;   /* find separator if bistate */
if(*sep!=',') sep=NULL;
if(flags&wimp_ISELECTED)             /* set up colours, string pointer */
  {
  fg=(flags>>28)&15;
  bg=(flags>>24)&15;
  if(sep) s=sep+1;
  }
else
  {
  fg=(flags>>24)&15;
  bg=(flags>>28)&15;
  }
text=*s!='@';                        /* check if sprite or text */
wimp_setcolour(d3__pretty||!text||!(flags&wimp_ISELECTED)?7:fg);
bbc_rectanglefill(x,y,w,h);          /* draw border */
x+=4; y+=4; h-=8; w-=8;
if(w<8 || h<8) return;
if(flags&wimp_ISELECTED)             /* draw inner border */
  {
  if(d3__pretty)
    {
    int t;

    t=d3_shadow_colour()+2;
    if(t>7) t=7;
    wimp_setcolour(t);
    bbc_rectanglefill(x,y,3,h);
    bbc_rectanglefill(x+4,y+h-3,w-4,3);
    wimp_setcolour(d3_shadow_colour());
    bbc_rectanglefill(x+4,y,3,h-4);
    bbc_rectanglefill(x+8,y+h-7,w-8,3);
    x+=8;
    }
  else
    {
    wimp_setcolour(!text && sep?fg:bg);
    bbc_rectanglefill(x,y,w,h);
    x+=4; y+=4;
    }
  }
else
  {
  if(d3__pretty)
    {
    wimp_setcolour(d3_highlight_colour());
    bbc_rectanglefill(x,y,3,h);
    bbc_rectanglefill(x+4,y+h-3,w-4,3);
    wimp_setcolour(d3_shadow_colour());
    bbc_rectanglefill(x+4,y,w-4,3);
    bbc_rectanglefill(x+2,y,1,1);
    bbc_rectanglefill(x+w-3,y+4,3,h-4-Wimpt_dy);
    bbc_rectanglefill(x+w-1,y+h-3,1,3);
    }
  else
    {
    wimp_setcolour(bg);
    bbc_rectanglefill(x,y,w,h);
    }
  x+=4;
  y+=4;
  if(sep) *sep=0;
  }
h-=8; w-=8;
if(text || !sep || d3__pretty)       /* draw background */
  {
  wimp_setcolour(d3__pretty || !text?(flags>>28)&15:bg);
  if(fullcolour) colourtran_setGCOL(colour,256,0,&fullcolour);
  bbc_rectanglefill(x,y,w,h);
  }
x1=x; y1=y;
if(text)
  {
  char *p=s;
  int  l;

  wimp_setcolour(d3__pretty?(flags>>24)&15:fg);
  while(*p>31) p++;
  *p=0;
  l=p-s;
  if(flags&wimp_IHCENTRE) x+=(w-l*16)/2+1;
  if(flags&wimp_IVCENTRE) y+=h/2-16-1;
  if((flags&(wimp_IHCENTRE|wimp_IRJUST))==wimp_IRJUST) x+=w-l*16+1;
  bbc_move(x,y+32);
  puts(s);
  }
else
  {
  sprite_id       sprite;
  sprite_factors  factors;
  sprite_pixtrans pixtrans[100];
  sprite_info     sprinfo;
  sprite_pixtrans *pxt;
  sprite_factors  *fct;
  sprite_area     *area;

  sprite.tag=sprite_id_name;
  sprite.s.name=s+1;
  area=resspr_area();
  if(sprite_readsize(area,&sprite,&sprinfo))
    {
    area=wimp_baseofsprites();
    if(sprite_readsize(area,&sprite,&sprinfo)) area=NULL;
    }
  if(area)
    {
    if(bbc_modevar(sprinfo.mode,bbc_Log2BPP)!=2 ||
       bbc_modevar(sprinfo.mode,bbc_XEigFactor)!=1 ||
       bbc_modevar(sprinfo.mode,bbc_YEigFactor)!=2)
      {
      /* not a mode 12 compatible sprite so read lookup etc */
      wimp_readpixtrans(area,&sprite,&factors,pixtrans);
      pxt=pixtrans;
      fct=&factors;
      }
    else
      {
      /* else use stuff generated by graphics_checkmode() */
      fct=graphics_factors();
      pxt=graphics_pixtrans();
      }
    if(flags&wimp_IVCENTRE)
      {
      int h1;

      h1=sprinfo.height*fct->ymag*Wimpt_dy/fct->ydiv;
      y+=(h-h1)/2+1;
      }
    if(flags&(wimp_IHCENTRE|wimp_IRJUST))
      {
      int w1;

      w1=w-(sprinfo.width*fct->xmag*Wimpt_dx/fct->xdiv)+1;
      if(flags&wimp_IHCENTRE) w1/=2;
      x+=w1;
      }
    sprite_put_scaled(area,&sprite,8,x,y,fct,pxt);
    }
  }
if(sep && !(flags&wimp_ISELECTED)) *sep=',';
if(end) *end=';';
if(flags&wimp_INOSELECT)
  {
  int off,xs,ys,y2,yt,r1,r2;

  wimp_setcolour(0);
  bbc_vduq(23,6,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa,0xaa);
  r1=242; r2=8; os_byte(163,&r1,&r2);
  ys=Wimpt_dy;
  xs=Wimpt_dx;
  off=0;
  yt=y1+h;
  for(y2=y1;y2<=yt;y2+=ys)
    {
    bbc_move(x1+off,y2);
    bbc_plot(17,w-off,0);
    off=xs-off;
    }
  r2=0; os_byte(163,&r1,&r2);
  }
if(!d3__pretty && (flags&wimp_ISELECTED) && !text && !sep)
  {
  graphics_set_invert_colour();
  bbc_rectanglefill(x1,y1,w,h);
  }
}

/*------------------------------------------------------------------------*/
BOOL d3_icon_is_button(wimp_icon *info)
{
if((info->flags&(wimp_IREDRAW|wimp_INDIRECT))==
   (wimp_IREDRAW|wimp_INDIRECT))
  {
  char *p;

  p=info->data.indirecttext.validstring;
  if((int)p>0x8000 && *p=='$') return(TRUE);
  }
return(FALSE);
}

/*------------------------------------------------------------------------*/
void d3_button_icon_validate(wimp_w w,wimp_i i)
{
wimp_icon info;

wimp_get_icon_info(w,i,&info);
if(!d3_icon_is_button(&info)) return;
wimp_set_icon_state(w,i,wimp_ITEXT|wimp_ISPRITE,
                     wimp_ITEXT|wimp_ISPRITE|wimp_IBORDER|wimp_IFILLED|
                     wimp_IFONT);
}

/*------------------------------------------------------------------------*/
void d3_button_icons_validate(wimp_w w)
{
/*
   Validates all the 3D button icons in a window
*/
wimp_i           ilist[MAXBUTTONS];
int              i;
wimp_which_block block;

block.window=w;
block.bit_set=block.bit_mask=wimp_IREDRAW|wimp_INDIRECT;
block.bit_mask|=wimp_IDELETED;
wimp_which_icon(&block,ilist);
i=0;
while(ilist[i]>=0)
  {
  d3_button_icon_validate(w,ilist[i]);
  i++;
  }
}

/*------------------------------------------------------------------------*/
BOOL d3_button_icon(wimp_w w,wimp_i i,wimp_box *g,coords_cvtstr *c)
{
/*
   Draws the specified icon as a 3D button if it is indirected and has the
   'needs help' bit set. For this to work, the icons must have certain
   bits set/cleared in the flags. Call d3_button_icons_validate() to ensure
   this just after creating the window.

   Returns true if successful or button was wrong type. Returns FALSE if
   the icon didn't exist.
*/
wimp_icon info;

if(wimp_get_icon_info(w,i,&info)) return(FALSE);
if(d3_icon_is_button(&info))
  {
  coords_box_toscreen(&info.box,c);
  if(coords_boxesoverlap(&info.box,g))
    d3_button(&info.box,info.flags,info.data.indirecttext.validstring+1);
  }
return(TRUE);
}

/*------------------------------------------------------------------------*/
void d3_button_icons(wimp_w w,wimp_box *g,coords_cvtstr *c)
{
/*
   Draws all the 3D button icons in a window
*/
wimp_i           ilist[MAXBUTTONS];
int              i;
wimp_which_block block;

block.window=w;
block.bit_set=block.bit_mask=wimp_IREDRAW|wimp_INDIRECT;
block.bit_mask|=wimp_IDELETED;
wimp_which_icon(&block,&ilist[0]);
i=0;
while(ilist[i]>=0 && d3_button_icon(w,ilist[i],g,c)) i++;
}

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
void d3__draw_icons(wimp_redrawstr *r,BOOL update)
{
int           more;
coords_cvtstr c;

graphics_checkmode(FALSE);
c.scy=r->scy;
c.scx=r->scx;
c.box=r->box;
do
  {
  if(update) bbc_clg();
  d3_button_icons(r->w,&r->g,&c);
  wimp_get_rectangle(r,&more);
  } while(more);
}

/*------------------------------------------------------------------------*/
void d3_redraw_icons(wimp_w w)
/* redraw routine appropriate for window with 3d button icons in it */
{
BOOL           more;
wimp_redrawstr r;

r.w=w;
wimp_redraw_wind(&r,&more);
if(more) d3__draw_icons(&r,FALSE);
}

/*------------------------------------------------------------------------*/
void d3_update_icons(wimp_w w,wimp_redrawstr *r)
/* update routine appropriate for window with 3d button icons in it */
{
BOOL           more;

r->w=w;
wimp_update_wind(r,&more);
if(more) d3__draw_icons(r,TRUE);
}

/*------------------------------------------------------------------------*/
void d3_draw_slider(wimp_w w,int i,wimp_box *g,coords_cvtstr *c)
{
wimp_icon info;

wimp_get_icon_info(w,i,&info);
coords_box_toscreen(&info.box,c);
if(coords_boxesoverlap(&info.box,g))
  {
  int pos=atoi(info.data.indirecttext.buffer+2);
  int x,y,w,h;

  w=info.box.x1-(x=info.box.x0)-1;
  h=info.box.y1-(y=info.box.y0)-1;
  wimp_setcolour(7);
  bbc_rectanglefill(x,y,w,h);
  wimp_setcolour((info.flags>>24)&15);
  if(pos>0) bbc_rectanglefill(x+4,y+4,pos,h-8);
  wimp_setcolour((info.flags>>28)&15);
  if(w-pos-8>0) bbc_rectanglefill(x+4+pos,y+4,w-pos-8,h-8);
  if(d3__pretty && pos>=8)
    {
    wimp_box box;

    box.x0=x+4;
    box.y0=y+4;
    box.x1=x+4+pos+1;
    box.y1=y+4+h-8+1;
    d3_outline_plinth(&box,g);
    }
  }
}
