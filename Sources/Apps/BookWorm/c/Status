
/*
    Merlyn Kline 1995

:NOTES

This module manages the status pane.

The status pane shows either the status of the browser (eg Ready, Fetching.., etc)
or, if there's a link under the pointer, the URL that a mouse click would fetch.

The fields used for this are:

  browser.status_str    The currently displayed string
  browser.status_fetch  The current fetching status
  browser.pointer_link  The id of the link under the pointer

When the dtatus display is updated, it checks for a link under the pointer. If
there is one (browser.pointer_link>0) it displays the URL. Otherwise, the other
fields are read and the currently displayed string is filled with the relevant
stuff.

:END

:MESSAGES
FETCH:Fetching '%s'...
READY:Ready
GetPics:Fetching %d images...
GetPic:Fetching image...
HwSTAT:This is the status bar. Messages are displayed here.
HwSTAT0:This field shows you status information about browser activity.|MIf the pointer is over a link in the displayed page the link target is shown here.
HwSTAT1:This status indicator shows when there is network activity.
HwSTAT2:This status indicator shows when there is network activity.
HwSTAT3:This field shows the amount of data retrieved on the current page.|MSmall amounts are shown in bytes; larger amounts are in kilobytes.
:END

:HISTORY
:END

*/

#include "stddef.h"
#include "stdarg.h"
#include "stdio.h"
#include "string.h"

/*----------------------------------------------------------------------*/
#include "wimp.h"
#include "wimpt.h"
#include "event.h"
#include "bbc.h"
#include "coords.h"
#include "msgs.h"
/*----------------------------------------------------------------------*/
#include "font.h"
#include "colourtran.h"
#include "sprite.h"
#include "resspr.h"
#include "swis.h"
#include "win.h" /* fixes problem caused by incorrect header for iconbar.c since Acorn had a go at it */

#include "Browser.h"
#include "Redraw1.h"
#include "IconBar.h"
#include "ErrorGen.h"
#include "PlotSpr.h"
#include "Main.h"
#include "Button.h"
#include "FontManage.h"
#include "Status.h"
#include "Images.h"
#include "mflex.h"

/*----------------------------------------------------------------------*/
os_error *status_update_text(browser *b)
{
  if(b->status.flags&PANE_ISOPEN)
  {
    wimp_icon ic;

    wimp_get_icon_info(b->status.w,0,&ic);
    strncpy(ic.data.indirecttext.buffer,b->status_str,ic.data.indirecttext.bufflen);
    ic.data.indirecttext.buffer[ic.data.indirecttext.bufflen-1]=0;
    wimp_set_icon_state(b->status.w,0,0,0);
  }
  return(NULL);
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
static os_error *status_update_icon(browser *b)
{
  if(b->status.flags&PANE_ISOPEN)
  {
    wimp_icon ic;

    wimp_get_icon_info(b->status.w,2,&ic);
    sprintf(ic.data.indirecttext.validstring,"Sa%d",b->animate);
    wimp_set_icon_state(b->status.w,2,0,0);
  }
  return(NULL);
}

/*----------------------------------------------------------------------*/
os_error *status_update_all(browser *b)
{
  status_update_text(b);
  status_update_icon(b);
  return(NULL);
}

/*----------------------------------------------------------------------*/
void status_event(wimp_eventstr *e,void *handle)
{
  browser *b;

  b=(browser*)handle;
  switch(e->e)
  {
    case wimp_EOPEN:   wimp_open_wind(&(e->data.o)); break;
    case wimp_ECLOSE:  break;
    case wimp_EBUT:    browser_give_focus_general(b); break;
    case wimp_ESENDWANTACK:
    {
      if(e->data.msg.hdr.action==wimp_MHELPREQUEST)
      {
        char tag[2];
        int  i=e->data.msg.data.helprequest.m.i;

        tag[0]=tag[1]=0;
        if(i>=0) tag[0]=i+1;
        help_genmessage("HwSTAT",tag);
      }
    }
    break;
    default:           browser_window_event(e,handle);
  }
}

/*----------------------------------------------------------------------*/
os_error *status_set_animation_state(browser *b,int state)
{
  if(state>=anim_length) state=1; else if(state<0) state=0;
  if(b->animate!=state)
  {
    b->animate=state;
    return(status_update_icon(b));
  }
  return(NULL);
}

/*----------------------------------------------------------------------*/
os_error *status_animate(browser *b)
{
  int now;

  ERROUT(os_swi1r(OS_ReadMonotonicTime,0,&now));
  if(now-b->lastframetime>5)
  {
    b->lastframetime=now;
    ERROUT(status_set_animation_state(b,b->animate+1));
  }
  return(NULL);
}

/*----------------------------------------------------------------------*/
os_error *status_new_status(browser *b)
{
  char new_status[sizeof(b->status_str)];

  new_status[0]=0;
  if(b->ptr_link>0)
  {
    HStream *p;

    p=fetch_token_address(b,b->ptr_link);
    STRFILL(new_status,p->anchor);
  }
  else
  {
    if(b->status_fetch==BS_IDLE)
    {
      int n;

      n=image_count_pending(b);
      if(n==1)
      {
        STRFILL(new_status,msgs_lookup("GetPic:Fetching image..."));
      }
      else if(n)
        sprintf(new_status,msgs_lookup("GetPics:Fetching %d images..."),n);
      else
      {
        STRFILL(new_status,msgs_lookup("READY:Ready"));
      }
    }
    else
    {
    char url[sizeof(new_status)],format[50];

    STRFILL(format,msgs_lookup("FETCH:Fetching '%s'..."));
    STRFILL(url,browser_fetching_url(b));
    url[sizeof(url)-strlen(format)-1]=0;
    sprintf(new_status,format,url);
    }
  }
  if(strcmp(new_status,b->status_str))
  {
    strcpy(b->status_str,new_status);
    ERROUT(status_update_text(b));
    button_set_states(b);
  }
  return(NULL);
}

/*----------------------------------------------------------------------*/
void status_show_progress(browser *b)
{
  char      progress[30];
  int       fetched;
  wimp_icon ic;

  fetched=image_total_bytes_fetched(b);
  if(b->source) fetched+=mflex_size(&b->source);
  if(b->savefile) fetched=ftell(b->savefile);
  if(b->bytes_fetched!=fetched)
  {
    b->bytes_fetched=fetched;
    if(fetched<1) strcpy(progress,"...");
    else if(fetched<10240) sprintf(progress,"%d",fetched);
    else sprintf(progress,"%dK",(fetched+512)/1024);
    wimp_get_icon_info(b->status.w,3,&ic);
    strncpy(ic.data.indirecttext.buffer,progress,ic.data.indirecttext.bufflen);
    ic.data.indirecttext.buffer[ic.data.indirecttext.bufflen-1]=0;
    if(b->status.flags&PANE_ISOPEN) wimp_set_icon_state(b->status.w,3,0,0);
  }
}
