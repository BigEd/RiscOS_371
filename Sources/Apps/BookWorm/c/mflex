/*
  Merlyn Kline, 1995

:NOTES

  Direct replacement for flex using malloc instead

  mallocs each block four bytes larger than requested and
  uses the first four bytes to store the size of the block.

  The returned address of the block is four bytes above the
  actual malloced address so the client never gets to see
  the extra four bytes.

:END

:MESSAGES
:END

:HISTORY
12/10/95 MK  Created
:END

*/

#define NOUSEMALLOC
#define NOTRACEFAILS

#include "stdlib.h"

#include "kernel.h"
/*----------------------------------------------------------------------*/
#include "flex.h"

/*----------------------------------------------------------------------*/
#include "Defs.h"
#include "mflex.h"

#if 0
typedef struct {
  flex_ptr anchor;      /* *anchor should point back to here. */
  int size;             /* in bytes. Exact size of logical area. */
} flex__rec;

static void mflex_test(flex_ptr p,char *id)
{
  void      *a,*b;
  flex__rec *t;

  trace_printf("FlexTest:%s",id);
  if(p && *p)
  {
    t=((flex__rec*)*p)-1;
    if(t->anchor!=p) trace_printf("Header corrupt");
  }
  a=b=NULL;
  flex_alloc(&a,2048);
  flex_alloc(&b,2048);
  if(a) flex_free(&a);
  if(b) flex_free(&b);
  trace_printf(" (ok)");
}
#else
#define mflex_test(x,y)
#endif

/*----------------------------------------------------------------------*/
BOOL mflex_alloc(flex_ptr a,int s)
{
#ifdef USEMALLOC
  void *p;

  p=malloc(s+4);
#ifdef TRACEFAILS
if(!p) trace_printf("*a*****malloc %d ;{{",s);
#endif
  if(!p) return(FALSE);
  *a=(void*)(((int)p)+4);
  *(int*)p=s;
  return(TRUE);
#else
  BOOL ok;

  mflex_test(NULL,"allocating");
  ok=flex_alloc(a,s);
#ifdef TRACEFAILS
if(!ok) trace_printf("*b****flex alloc %d ;{{",s);
#endif
  mflex_test(a,"allocated");
  return(ok);
#endif
}

/*----------------------------------------------------------------------*/
BOOL mflex_extend(flex_ptr a,int s)
{
#ifdef USEMALLOC
  void *p;

  p=(void*)(((int)*a)-4);
  p=realloc(p,s+4);
#ifdef TRACEFAILS
if(!p) trace_printf("*c***realloc %d ;{{",s);
#endif
  if(!p) return(FALSE);
  *a=(void*)(((int)p)+4);
  *(int*)p=s;
  return(TRUE);
#else
  BOOL ok;

  mflex_test(a,"extending");
  ok=flex_extend(a,s);
#ifdef TRACEFAILS
if(!ok) trace_printf("*d***flextend %d ;{{",s);
#endif
  mflex_test(a,"extended");
  return(ok);
#endif
}

/*----------------------------------------------------------------------*/
BOOL mflex_size(flex_ptr a)
{
#ifdef USEMALLOC
  return(*(((int*)*a)-1));
#else
  return(flex_size(a));
#endif
}

/*----------------------------------------------------------------------*/
void mflex_init(void)
{
#ifndef USEMALLOC
  void *p;

  p=malloc(40*1024); /* reserve a bit of memory below flex */
#endif
  flex_init(NULL, NULL); /* intialise flex anyway - RISC OSLib uses it */
#ifndef USEMALLOC
  if(p) free(p);
#else
  _kernel_register_slotextend(flex_budge);
#endif
  return;
}

/*----------------------------------------------------------------------*/
void mflex_free(flex_ptr a)
{
#ifdef USEMALLOC
  void *p;

  p=(void*)(((int)*a)-4);
#ifdef TRACEFAILS
if(!p) trace_printf("*e**************** ;{{");
#endif
  free(p);
  *a=NULL;
#else
  mflex_test(a,"freeing");
  flex_free(a);
  mflex_test(a,"freed");
#endif
}
